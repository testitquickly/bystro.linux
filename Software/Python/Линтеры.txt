Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-07-30T14:02:48+03:00

====== Линтеры ======

[ @python @linters @flake8 @pep8 ]

Обычно встроены в [[IDE]]. 

Разумно использовать ту, что уже встроена в IDE и работает «на лету» при наборе кода — как правило, это ''pycodestyle''. Но линтеры разные, например, ''ruff'' объединяет в себе сразу десятки линтеров, проверяет стиль кода (и может что-то исправлять), сортировку импортов, ошибки типов и даже форматирование; ''mypy'' проверяет корректность аннотаций типов кода в Python (когда число представлено как string, а должно быть integer); ''pylint'' работает медленее, но выдаёт расширенные сообщения, включая рекомендации по стилю, ошибкам, сложности кода и полезен для глубокого аудита кода. 

Поэтому всегда есть смысл использовать отдельные инструменты и вызвать их в консоли.

===== pcodestyle =====

Базовый. Когда-то назывался ''pep8''.

Установить:

''pipx install pycodestyle''

Запустить в корне проекта Python:

''pycodestyle .''

Проверить отдельный файл:

''pycodestyle functions/images.py''

Проверить все файлы в отдельном каталоге:

''pycodestyle functions''

===== flake8 =====

Установить:

''pipx install flake8''

Запустить в корне проекта Python:

''flake8 .''

Можно ограничить проверку только определёнными папками или файлами — их надо перечислить через пробел:

''flake8 src tests''

===== ruff =====

Более современная замена flake8. Работает быстро.

''pipx install ruff''

Запустить в корне проекта Python:

''ruff check''

Проверить отдельный файл:

''ruff check functions/messages.py'' 

В хороших руках список проблем уместится на нескольких экранах. Если нет:

''ruff check | less''

…выход из режима по клавише ''q''. Или можно передавать этот список в отдельный файл и читать его последовательно:

''ruff check > /tmp/ruff.txt; kate /tmp/ruff.txt''

…Удобнее воспринимать описание ошибок с моноширинным шрифтом вроде Roboto Mono.

Можно запускать линтер с опцией «немедленно починить»:

''ruff check --fix''

…но лучше не надо, потому что он начнет непредсказуемо менять код по своему усмотрению.

Аналогично полезно/опасная команда, которая отформатирует содержимое всех файлов по своему усмотрению:

''ruff format .''

Проверить код ошибки (обширная справка):

''ruff rule F401''

Можно в файл .bashrc записать алиас

''alias rfc='ruff check'''

и вызывать его в консоли

''rfc''

или

''rfc | less''

или

''rfc main.py''

===== pylint =====

Очень строгий анализатор стиля и ошибок. Медленнее других (это заметно на больших проектах), но выдаёт расширенные сообщения, включая рекомендации по стилю, ошибкам, сложности кода. Полезен для глубокого аудита кода.

''pipx install pylint''

Запустить в корне проекта Python, по аналогии с другими линтерами, можно, но охватит вообще все файлы и застопорится на мусоре. Рекомендуется или запускать его по отдельным каталогам:

''pylint myproject/ tests/''

или сделать конфиг-файл ''.pylintrc'':

''pylint --generate-rcfile > .pylintrc''

появится полный конфигурационный файл со всеми настройками по умолчанию. И в этот файл добавить новый раздел::

'''
[MASTER]
ignore=venv,build,docs,migrations,tests,__pycache__
'''

Тогда запуск в корне проекта будет простым и эффективным:

''pylint .''

3. mypy — проверка типов (typing, pyright аналог)


	Установка:

pip install mypy

Запуск:

	mypy путь/к/файлу.py

✅ Рекомендуемый стек линтинга (быстро и современно)

pip install ruff mypy

Проверить код:


===== anaconda =====

Был популярным плагином для Sublime Text (см. [[Как сделать Python-проект в Sublime]]). Заброшен и не обновляется. 

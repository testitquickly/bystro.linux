Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-09-24T14:54:56+03:00

====== pdoc ======

[ @python @doc @pdoc ]

Установить в системе глобально:

''pipx install pdoc''

Зайти в каталог с проектом:

''pdoc . --output-dir docs; firefox docs/index.html''

В корне проекта будет создан каталог ''docs'', в котором появятся html-файлы. Команда ''gio open docs/index.html'' открывает сборку документации в новой вкладке дефолтного браузера в KDE.

Сообрать документацию по файлам (модулям) из отдельного каталога:

'''
pdoc functions/ --output-dir docs; firefox docs/index.html
'''

Учесть, что при сборке документации сперва будет инициирована сборка и выполнение проекта. Если проект еще не готов и есть ошибки, документация тоже не соберется.

===== Запуск =====

Учесть, что ''pdoc'' запускается вне контекста, в котором проект нормально работает, и «не видит»  локальные модули. Например, в корне проекта, где лежит main.py, есть файл config.py (глобальные переменные), и он уже импортирован в main.py через команду ''import config'', но для ''pdoc'' это не аргумент, по-умолчанию он объявит об отсутствии модуля ''config'' и остановится. 

Решение — приказать Python искать модули в текущей директории (в которую мы уже зашли). Лучше сделать это отдельным скриптом:

{{{code: id="generate_docs" lang="sh" linenumbers="True"
#!/bin/bash

DOCS_DIR="docs"
LOGO_URL="https://testitquickly.com/wp-content/uploads/2021/09/favicon_lupan.jpg"
FOOTER_TEXT="testitquickly.com"

    # Переходим в корень проекта
cd "$(dirname "$0")/.."

# Ищем все подпапки с __init__.py,
# исключая корень проекта и каталоги /docs и /__pycache__
MODULES=$(find . -mindepth 2 -type f -name '__init__.py' \
	-not -path './docs/*' -not -path './*/__pycache__/*' \
	-exec dirname {} \; | sed 's|^\./||')

# если модули не найдены — прекратить работу
if [[ -z "$MODULES" ]]; then
echo "Нет валидных Python-модулей для документации."
exit 1
fi

# если модули найдены — вывести их список
echo "Модули:"
for mod in $MODULES; do
echo " - $mod"
done

echo -e "\n\tГенерирую документацию через pdoc"
PYTHONPATH=. pdoc . $MODULES \
	--output-dir docs \
	--mermaid \
	--show-source \
	--no-include-undocumented \
	--footer-text "$FOOTER_TEXT" \
	--logo "$LOGO_URL"

echo -e "\nОткрываю документацию"
firefox "$DOCS_DIR/index.html"

}}}

Тут в корневом каталоге проекта выполняется динамическая сборка списка всех ''*.py''-файлов и подкаталогов (кроме ''/docs'' и ''/__pycache__'', поэтому не приходится очищать кэш) и генерирование по ним документации.

И поскольку в главном каталоге лежит файл ''__init__.py'', то главный каталог проекта считается пакетом Python и содержимое его файла README.md может быть передано в index.html. Для этого в файл ''__init__.py'' надо записать инструкцию

''"""''
''.. include:: ./README.md''
''"""''

===== Настройка стилей =====

Есть документация, которая не особо помогает: https://pdoc.dev/docs/pdoc.html#edit-pdocs-html-template

Я подразумевал, что достаточно сделать в каталоге проекта условынй файл ''custom.css'' и подключить его в команде генерирования документации. Логика в том, что последний css перекрывает все предыдущие, и сохранится баланс между шаблонами и собственными настройками. Но это не сработало.

Предположим, что надо (всего лишь) задать размер шрифта. По-умолчанию он мелковат.

Сперва надо точно знать, в какую виртуалку был установлен pdoc: 

* в систему через pipx (//мой случай//)
* или в venv проекта через pip. 

У меня первый случай, поэтому можно (но не нужно) отредактировать файл с шаблоном:

''mcedit ~/.local/pipx/venvs/pdoc/lib/python3.11/site-packages/pdoc/templates/content.css''

В этом файле есть раздел .pdoc — туда можно вписать всё, что нужно. Но это очень грубое вмешательство в шаблоны, поэтому лучше отредактировать другой файл, по-умолчанию пустой:

''mcedit ~/.local/pipx/venvs/pdoc/lib/python3.11/site-packages/pdoc/templates/custom.css''

Добавить туда свои настройки для существующих разделов. Минимальный пример:

''.pdoc {''
	''font-size: 1.5em;''
	''}''

Сгенерировать документацию из проекта через ''pdoc'' штатным способом.

В будущем будет проще жить, если в каталоге проекта [[Debian:HowTo:Сделать:Симлинки и хардлинки:symlink]] на тот самый файл ''custom.css''.

===== Подтянуть в pdoc файлы .md =====

Или через очень геморройный геморрой, или переезжать на [[MkDocs]].

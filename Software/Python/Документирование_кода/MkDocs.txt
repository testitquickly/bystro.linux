Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-09-24T02:16:12+03:00

====== MkDocs ======

[ @python @doc @mkdocs @images ]

Сперва надо понять, как устроена организация файлов в MkDocs — в иерархии его меню нет ссылок на отдельные файлы, он рассматривает каждый «файл .md» в виде каталога с файлом //index.html// внутри. 

Этот подход к организации документов имеет свой резон. Его или надо принять полностью, или нет. Он хорош для двухуровневой иерархии, где название каталога с файлами является общей темой:

'''
Python/how_to_start.md
Python/what_to_read.md
…
'''

На сайте это превратится в 

'''
| Python
| -- How to start
| -- What to read
…
'''

Если будет нужна вложенная структура, как в этом блокноте Zim, то на небольшом количестве файлов ещё можно вывернуться, но чем больше будет файлов, тем сложнее станет навигация по ним:

''docs/Python/Python.md''
''docs/Python/Документирование_кода.md''
''docs/Python/Документирование_кода/MkDocs.md''
''docs/Python/Документирование_кода/Pandoc.md''
''docs/Python/Документирование_кода/pdoc.md''

И если написать что-то в файле ''Python.md'', затем в ''Документирование_кода.md'', и затем в подчиненных файлах ''MkDocs.md'' (и так далее), то файл ''Python'' в раскрывающемся меню на сайте от MkDocs мы найдем легко, а нижележащий файл ''Документирование кода'' уже нет, он будет «спрятан» где-то дальше в меню, под свернутым разделом «''Python»'', а все файлы под ним (''MkDocs'', ''Pandoc'', ''pdoc'') будут свёрнуты под отдельным разделом «Документирование кода». Не получится сходу понять, где находится файл ''Документирование кода'' и раздел «Документирование кода», потому что в иерархии ссылок они все — отдельные каталоги.

Кажется, что раздел «Документирование кода» ошибочно дублируется…

{{../../../../images/MkDocs_menu_expanded.png}}

Если подразделов будет несколько, навигация по меню усложнится до невыносимого.

===== Сделать файлы документации =====

Для маленького проекта это оверкилл, но любой проект может начать укрупняться, поэтому лучше подумать о структуре документов заранее. 

Сперва подготовить файлы для сборки: в каталоге проекта сделать подкаталог ''docs/'' и положить в него файлы .md — из них MkDocs соберет веб-сайт.

==== Структура документации ====

Документы кучкуются или по отношению к какой-то теме, или по отношению к своему типу (отдельно инструкции, отдельно теория). Есть смысл делить их по логике типа документов:

''docs/index.md'' (точка сборки)
''docs/tutorial/''
''docs/how-to/''
''docs/reference/''
''docs/explanation/''

Плагин __awesome-nav__ упрощает построение меню в MkDocs: он превращает каждый каталог в ''/docs'' в отдельный пункт меню. 

Все вложенные каталоги (с файлами, рекурсивно вглубь) будут представлены на сайте как вложенные разделы. В меню будет отображен каждый файл ''*.md'', который будет находиться в каталоге ''docs''/ и вложенных подкаталогах. Если в каком-то каталоге в ''docs''/ нет хотя бы одно файла ''*.md'' — в меню сайта его не будет.

В каждом отдельном «файле раздела» можно перечислить документы, которые должны относиться к данной теме. Например:

''docs/tutorial/index.md''
''docs/tutorials/preconditions.md''
''docs/tutorials/install_approach.md''

и так далее.

Файл ‘Index‘ всегда отображается первым в списке ссылок каждого раздела. 

Можно, но не нужно создавать в корне ''docs/'' файл с именем каталога — ''docs/tutorial/tutorial.md'' — в меню сайта появятся и ссылка на файл, и ссылка на каталог (в виде раздела). Это нарушит принцип иерархического восприятия разделов меню.

В названиях каталогов и файлов могут быть пробелы, и MkDocs их подхватит, но лучше избегать пробелов. Все нижние подчеркивания и тире в названиях файлов и каталогах будут представлены в итоге как пробелы.

===== Установить MkDocs =====

Его можно установить на уровне системы для всех проектов. 

Создаём изолированное окружение для mkdocs-tools:

''pipx install --python /usr/bin/python3 mkdocs''

Всё будет установлено в каталог ''~/.local/pipx/venvs/mkdocs/'' 

В это окружение "установить" mkdocstrings с extras:

''pipx inject mkdocs mkdocstrings[python] mkdocs-material mkdocs-awesome-nav''

Плагин ''material'' генерирует сайт c динамическими меню, поиском, ToC, табами на странице, mobile first и много другое.

Проверить установку:

''mkdocs --version''

===== Настроить mkdocs.yml =====

В корне проекта создать файл ''mkdocs.yml'' с таким содержимым:

{{{code: lang="yaml" linenumbers="True"
site_name: Export bystro.linux from Zim
site_url: https://testitquickly.com/bystro.linux/
docs_dir: docs

theme:
  name: "material"

plugins:
  - mkdocstrings:
      handlers:
        python:
          options:
            show_root_heading: true   # Показывать заголовок функции/класса при его автовызове
            heading_level: 3          # Уровень заголовка (h3)
  - awesome-nav

nav:
  - Home: index.md
  # - File: how-to/test.md

}}}

//nav// — это общее меню сайта. Туда можно добавить отсылку к любому файлу .md из проекта.

Тут же можно задать любому файлу отдельный заголовок:

	  ''- Install Approach: tutorials/install_approach.md''

==== Изменить содержимое меню ====

Надо настраивать awesome-nav: 

* сделать в каталоге docs/ файл ''.nav.yml''
* затем см. https://github.com/lukasgeiter/mkdocs-awesome-nav/blob/main/docs/features/nav.md

===== Поднять сервер =====

Перейти в каталог с проектом. В нём должен быть подкаталог ''docs/'' с файлами .md

''mkdocs serve''

Локальный сайт будет поднят по адресу http://127.0.0.1:8000/ 

По-хорошему надо запускать сервер MkDocs, выполнять сборку документации и гасить его. Если надо запустить вручную, то лучше делать это в отдельном окне терминала, потому что сервер будет IRL сообщать о всех состояниях и вероятных ошибках.

==== Ссылки на файлы ====

Пример содержимого файла:

{{{code: lang="markdown" linenumbers="True"
# Installation

[Main approach](install_approach.md)
}}}

Важно помнить, что пути к файлам в среде MkDocs относительные, поэтому если дочерние файлы находятся в том же каталоге, что и «головной», то путь надо указывать относительный.

И если нужна ссылка к файлу ''reference.md'', то ее надо указывать с учетом того, что корневым каталогов для доков является каталог ''docs/'', поэтому ссылка будет такой:

{{{code: lang="markdown" linenumbers="True"
# Installation

[Main approach](install_approach.md)
[A reference](reference/reference.md)
}}}

==== Документация по API из докстрингов ====

В каждом md-файле можно прописать 

* или вызов информации из докстрингов для определенной функции, 
* или вызов всех докстрингов из всех функций определенного файла — если он оформлен как пакет через ''__init__.py''

Пример содержимого файла ''install_approach.md'', в котором появится информация о модулях из файла ''functions/files.py'':

{{{code: lang="markdown" linenumbers="True"
# Where to install

This part of the project documentation focuses on a
**learning-oriented** approach. You'll learn where to
install software.

> **Note:** Expand this section by considering the
> following points:

- Help newcomers with getting started
- Teach readers about your library by making them
    write code

# Описание отдельной функции

Подтянуть описание отдельной функции (модуля) из пакета functions:

::: functions.files.add_current_date_to_file_about

# Описание всех функций

Подтянуть описание о всех функциях (модулях) из пакета functions:

::: functions.files
}}}

===== Экспорт html =====

По-умолчанию ''mkdocs serve'' запускает свой сервер и держит все файлы сайта в RAM. Чтобы получить набор html, надо или сперва, или отдельно выполнить

''mkdocs build''

Все разделы будут представлены как каталоги, в каждом из которых находится файл index.html. Сервер, на котором будет в итоге работать сайт с документацией, должен поддерживать автоматическое отображение //index.html// при заходе в каталог (обычно все это умеют, но мало ли).


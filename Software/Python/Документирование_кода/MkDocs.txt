Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-09-24T02:16:12+03:00

====== MkDocs ======

[ @python @doc @mkdocs @images ]

===== Теория =====

Сперва надо понять, как устроена организация файлов в MkDocs — в иерархии его меню нет ссылок на отдельные файлы, он рассматривает каждый «файл .md» в виде каталога с файлом //index.html// внутри. 

Этот подход к организации документов имеет свой резон. Его или надо принять полностью, или нет. Он хорош для двухуровневой иерархии, где название каталога с файлами является общей темой:

'''
Python/how_to_start.md
Python/what_to_read.md
…
'''

На сайте это превратится в 

'''
| Python
| -- How to start
| -- What to read
…
'''

Если будет нужна вложенная структура, как в этом блокноте Zim, то на небольшом количестве файлов ещё можно вывернуться, но чем больше будет файлов, тем сложнее станет навигация по ним:

''docs/Python/Python.md''
''docs/Python/Документирование_кода.md''
''docs/Python/Документирование_кода/MkDocs.md''
''docs/Python/Документирование_кода/Pandoc.md''
''docs/Python/Документирование_кода/pdoc.md''

И если написать что-то в файле ''Python.md'', затем в ''Документирование_кода.md'', и затем в подчиненных файлах ''MkDocs.md'' (и так далее), то файл ''Python'' в раскрывающемся меню на сайте от MkDocs мы найдем легко, а нижележащий файл ''Документирование кода'' уже нет, он будет «спрятан» где-то дальше в меню, под свернутым разделом «''Python»'', а все файлы под ним (''MkDocs'', ''Pandoc'', ''pdoc'') будут свёрнуты под отдельным разделом «Документирование кода». Не получится сходу понять, где находится файл “''Документирование кода''” и раздел «Документирование кода», потому что в иерархии ссылок они все — отдельные каталоги.

Кажется, что раздел «Документирование кода» ошибочно дублируется…

{{../../../../images/MkDocs_menu_expanded.png}}

Если вложенных подразделов будет несколько, навигация по меню усложнится до невыносимого — MkDocs в принципе не для этого был задуман, для сборки документации с большой вложенностью разделов смотреть [[Документирование_кода#Sphinx]]

===== Сделать файлы документации =====

В каталоге проекта сделать подкаталог ''docs/'' (можно назначить другой каталог, и даже сам корень проекта) и положить в него файлы .md — из них MkDocs соберет веб-сайт.

Для маленького проекта это может быть излишне, но любой проект может начать укрупняться, поэтому лучше подумать о структуре документов заранее. Документы кучкуются или по отношению к какой-то теме, или по отношению к своему типу (отдельно инструкции, отдельно теория). Есть смысл делить их по логике типа документов:

''docs/index.md'' (точка сборки)
''docs/tutorial/''
''docs/how-to/''
''docs/reference/''
''docs/explanation/''

Забегая вперед  — навигацией по файлам будет управлять плагин //awesome-nav// упрощает построение меню в MkDocs: он превращает каждый каталог в ''/docs'' в отдельный пункт меню. Плагин устроен так, что все вложенные каталоги (с файлами, рекурсивно вглубь), которые MkDocs найдёт, будут представлены на сайте документации как вложенные разделы. В меню будет отображен каждый файл ''*.md'', который будет находиться в каталоге ''docs''/ и вложенных подкаталогах. Если в каком-то подкаталоге ''docs''/ нет хотя бы одного файла ''*.md'' — в меню сайта его не будет.

В каждом отдельном «файле раздела» можно перечислить документы, которые должны относиться к данной теме. Например:

''docs/tutorial/index.md''
''docs/tutorials/preconditions.md''
''docs/tutorials/install_approach.md''

и так далее. Файл ‘Index‘ всегда отображается первым в списке ссылок каждого раздела. 

Можно, но не нужно создавать в корне ''docs/'' файл с именем каталога — ''docs/tutorial/tutorial.md'' — в меню сайта появятся и ссылка на файл, и ссылка на каталог (в виде раздела). Это нарушит принцип иерархического восприятия разделов меню.

В названиях каталогов и файлов могут быть пробелы, и MkDocs их подхватит, но лучше избегать пробелов. Все нижние подчеркивания и тире в названиях файлов и каталогах будут представлены в итоге как пробелы.

===== Установить MkDocs =====

Его можно установить на уровне системы для всех проектов. 

Создаём изолированное окружение для mkdocs-tools:

''pipx install --python /usr/bin/python3 mkdocs''

Всё будет установлено в каталог ''~/.local/pipx/venvs/mkdocs/'' 

В это окружение "установить" плагины:

''pipx inject mkdocs mkdocstrings[python] mkdocs-material mkdocs-awesome-nav''

Через плагин ''material'' McDocs поднимет сайт c динамическими меню, поиском, ToC, табами на странице, mobile first и много другое (разные плагины).

Проверить установку:

''mkdocs --version''

==== Настроить mkdocs.yml ====

В корне проекта создать файл ''mkdocs.yml'' с таким содержимым:

{{{code: lang="yaml" linenumbers="True"
site_name: Export bystro.linux from Zim
site_url: https://testitquickly.com/bystro.linux/
docs_dir: docs

theme:
  name: "material"

plugins:
  - awesome-nav
  - mkdocstrings:
      handlers:
        python:
          options:
            show_root_heading: true   # Показывать заголовок функции/класса при его автовызове
            heading_level: 3          # Уровень заголовка (h3)

}}}

Каждый отступ — два пробела.

===== Управление сервером MkDocs =====

==== Поднять сервер ====

Произойдет вот что:

* локальный сайт с документацией будет загружен в RAM и будет работать по адресу http://127.0.0.1:8000/, 
* сервер MkDocs будет работать непрерывно, все изменения в файлах с документами будут автоматически отображаться на странице сайта сразу после Ctrl+S в файлах.

Как-раз из-за того, что сервер MkDocs будет работать непрерывно — лучше запустить его в отдельном окне терминала, потому что там будет постоянно отображаться лог по любому чиху. Можно запустить его в консоли в VSCodium, но нажатие Ctrl+C не прервет его работу, сервер не отключится и продолжить приносить в консоль логи, что будет мешать. Поэтому:

1. открыть отдельное окно терминала
2. перейти в каталог с проектом — туда, где 
	a. лежит подкаталог ''docs/'' с файлами .md
	b. и файл ''mkdocs.yml''
3. запуск

''mkdocs serve''

==== Погасить сервер ====

Нужен ''Ctrl+C'', но если этого не хватает, то надо убить процесс MkDocs в системе и сразу убедиться в том, что сервер погашен:

''pkill -f mkdocs && ps aux | grep mkdocs''

===== Опубликовать сайт на GitHub =====

Сделать файл ''.github/workflows/ci.yml'' с таким содержимым:

{{{code: lang="yaml" linenumbers="True"
name: ci
on:
  push:
    branches:
      - master
      - main
permissions:
  contents: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-
      - run: pip install mkdocs-material
      - run: mkdocs gh-deploy --force
}}}

1. Create a brand new GitHub repository
2. Hook up that GitHub repository remote with the project code (i.e. do git init then follow instructions to add the remote)
3. Push branch to main on the GitHub repository
4. Go to GitHub and into settings and change pages to deploy from branch, choose the gh-pages branch.
5. A GitHub Action will trigger that deploys the site

===== Особенности MkDocs =====

==== Настроить меню ====

//nav// — это общее меню сайта. Туда можно добавить отсылку к любому файлу .md из проекта. 

Если поднять MkDocs по-старинке, без плагина awesome-nav, то надо в mkdocs.yml вручную прописывать каждый файл, который будет отображаться в общем меню. С плагином ''awesome-nav'' всё это отпадает, он сам соберет меню на основе каталогов и файлов *.md, которые MkDocs найдёт в ''docs_dir''. Но его тоже можно настроить — хотя бы для того, чтобы определить порядок отображения разделов меню, который по-умолчанию отсортирован по алфавиту:

* сделать файл ''docs/.nav.yml'' ''—'' см. https://github.com/lukasgeiter/mkdocs-awesome-nav/blob/main/docs/features/nav.md
* расписать его содержимое по своему усмотрению:
	* указать полные названия файлов, из которых собираются страницы
	* указать название каталога, который содержит файлы .md, чтобы он стал разделом (который разворачивается)
	* ссылки на внешние ресурсы

{{{code: lang="yaml" linenumbers="True"
nav:
  - README.md
  - Plan.md
  - api-functions.md
  - Диаграммы
  - testitquickly.com: https://testitquickly.com
}}}

И далее, если появится новый документ или раздел, его надо прописать в ''docs/.nav.yml''

Впрочем, если порядок документов, которые автоматически подтягиваются из ''docs/'', устраивает (или не имеет значения) и надо всего лишь добавить в меню ссылку на внешний ресурс, можно использовать “glob pattern”:

{{{code: lang="yaml" linenumbers="True"
nav:
  - README.md
  - "*"
  - testitquickly.com: https://testitquickly.com
}}}

Удобно так:

{{{code: lang="yaml" linenumbers="True"
nav:
  - README.md
  - Plan.md
  - api-functions.md
  - Диаграммы
  - "*"
  - testitquickly.com: https://testitquickly.com
}}}

Теперь все новые страницы, которые MkDocs распознает в каталоге ''docs/'', автоматически будут показаны в меню. 

В файле ''docs/.nav.yml'' можно насильно переименовать заголовок любого пункта меню:

''- Функции снаружи: api-functions.md''

То же можно делать с каталогами:

  ''- User Guides: Диаграммы''

Можно заглушить какой-то файл, который нужен в каталоге, но не должен отображаться в меню:

''ignore: "hide-me.md"''

Можно заглушить все файлы, названия которых заканчиваются на “''.hide.md''”:

''ignore: "*.hide.md"''

==== Настроить тему ====

См. https://mrkeo.github.io/setup/changing-the-colors/

Включить переключение темы светлая/темная:

{{{code: lang="yaml" linenumbers="True"
theme:
  palette:
    - scheme: slate
      primary: blue grey
      accent: amber
      toggle:
        icon: material/toggle-switch
        name: Switch to light mode

    - scheme: default
      primary: indigo
      accent: indigo
      toggle:
        icon: material/toggle-switch-off-outline
        name: Switch to dark mode

}}}

=== Свои стили ===

По-умолчанию MkDocs выдаёт мелковатый шрифт.

1. Сделать в каталоге ''docs/'' файл ''css/custom.css''
2. Вставить свои инструкции для размера шрифта статей и для размера шрифта меню

{{{code: lang="css" linenumbers="True"
.md-typeset {
	font-size: 1.0rem;
}

.md-nav {
	font-size: 0.95rem;
}
}}}

3. В mkdocs.yml добавить подключение этого файла

{{{code: lang="yaml" linenumbers="True"
extra_css:
  - css/custom.css
}}}

==== Комментарии ====

В md-файлах нужны стандартные html-овские комментарии:

''<!-- ![example](../Диаграммы/img/example.svg) -->''

В VSCodium удобно то, что при нажатии Ctrl+D (я привык к этому сочетанию) в файлах .md строка автоматически комментируется html-овским тэгом.  

==== Callouts ====

Это информационные «плашки» на страницах.

В файле ''mkdocs.yml'' добавить настройку:

{{{code: lang="yaml" linenumbers="True"
markdown_extensions:
  - admonition #  добавляет notes
  - pymdownx.tabbed # Добавляет вкладки в документацию
  - pymdownx.details # notes, которые можно свернуть/развернуть
}}}

=== Примеры ===

''!!! quote "Quote"'' 
	''Текст…''

Развернуть/свернуть:

''??? info "Expand"''
	''Текст…''

''!!! note "Note"''
	''Текст…''
	
Можно убрать название:

''!!! note " "''
	''Текст…''

Красные:

''!!! danger "Danger"''
	''Текст…''

''!!! failure "Failure"'' 
	''Текст…''

''!!! bug "Bug"'' 
	''Текст…''

''!!! warning "Warning"'' 
	''Текст…''

Зеленые:

''!!! question "Question"'' 
	''Текст…''

''!!! success "Success"''
	''Текст…''
 
''!!! tip "Tip"'' 
	''Текст…''
 
''!!! info "Info"'' 
	''Текст…''

Синие:

''!!! help "Help"'' 
	''Текст…''

''!!! example "Example"''
	 ''Текст…''

==== Табы на странице ====

На странице появляются ссылки-вкладки, клик по каждой меняет текст, который следует за ними. Удобно представлять что-то вроде 

''[До похудения] [После похудения]''

В файле ''mkdocs.yml'' добавить настройку:

{{{code: lang="yaml" linenumbers="True"
markdown_extensions:
  - pymdownx.tabbed: # спрятанные слои текста под табами на странцие
      alternate_style: true
}}}

В нужном файле объявить эти «табы» и их содержимое с соблюдением синтаксиса:

* первая строка начинается с ''==='' и содержит ''"Заголовок таба"''
* всё содержимое таба должно отступить от левого края — или табуляция, или пробелы
* первую строку можно прижать под заголовок или опустить пустым абзацем

{{{code: lang="python" linenumbers="True"
=== "Plain text"

    This is some plain text

=== "Unordered list"

    * First item
    * Second item
    * Third item

=== "Ordered list"

    1. First item
    2. Second item
    3. Third item
}}}

Под такие табы может быть удобно «прятать» куски кода для сравнения, но это будет работать только при включенном 

''markdown_extensions:''
  ''- pymdownx.superfences # оформление блоков кода''

иначе будет отключено форматирование блока кода через «MD pre», потому что оно требует прижать к левому краю первую и последнюю строки с одинарными кавычками.

{{{code: lang="yaml" linenumbers="True"
=== "Python"

    ```py
    def main():
        print("Hello world!")

    if __name__ == "__main__":
        main()
    ```

=== "JavaScript"

    ```js
    function main() {
        console.log("Hello world!");
    }

    main();
    ```
}}}

==== Ссылки на файлы ====

MkDocs понимает названия каталогов и файлов на кириллице, если все символы в UTF-8.

Пример ссылки на файл:

{{{code: lang="markdown" linenumbers="True"
# Installation

[Main approach](install_approach.md)
}}}

Важно помнить, что пути к файлам в среде MkDocs относительные, поэтому если дочерние файлы находятся в том же каталоге, что и «головной», то путь надо указывать относительный — в данном случае одно только название нужного файла.

Если нужна ссылка к файлу, который находится в подкаталоге — ''docs/reference/about.md'', то ее надо указывать с учетом того, что корневым каталогов для доков является каталог ''docs/'', поэтому ссылка будет такой:

{{{code: lang="markdown" linenumbers="True"
# Installation

[Main approach](install_approach.md)
[A reference](reference/about.md)
}}}

MkDocs сам превратит эти файлы в одноименные каталоги, в каждом из которых будет отдельный файл index.html с содержимым соответствующего файла .md

==== Подтянуть содержимое внешних файлов ====

Ситуация: MkDocs анализирует файлы из каталога docs/, а надо включить содержимое README.md, которое, как всегда, находится в корне каталога, и копировать его в docs/ тупо, бо придется позже делать изменения в нескольких местах. 

Два решения:

=== Сделать в docs/ симлинк на README.md ===

Простейший случай, когда README.md лежит в корне проекта.

1. Зайти в ''docs/''
2. создать относительный симлинк

''ln -s ../README.md''

В норме этого должно быть достаточно, но конкретно здесь будет проблема, про которую будет написано в логе сервера:

''Excluding 'README.md' from the site because it conflicts with 'index.md'.''

И это правильно. Файл ''index.md'' по-дефолту отображается в меню как ''Home'' — в нем можно в первой строке прописать заголовок, и тогда в меню файл будет отображаться согласно своему заголовку (например “''# Главная''”). А ссылка на файл README в меню тоже по-умолчанию отображается как ''Home'' — вот и коллизия.

Если в файле ''index.md'' нет острой надобности, то лучше держать весь контент главной страницы в README.md, а файл ''index.md'' можно кикнуть.

Если зачем-то нужен файл ''index.md'' и рядом с ним файл ''README.md'', то надо сделать симлинк на ''README.md'' с другим именем (можно и кириллицей) — не забыть прописать в имени создаваемого симлинка расширение “.md”, иначе MkDocs его не подхватит: 

''ln -s ../README.md "О проекте.md"''

или крэйзи

''ln -s ../README.md Home.md''

Также в меню можно добавить любой другой md-файл, который по какой-то причине должен находиться вне ''docs/'':

''ln -s ../test/test.md''

Его названием будет заголовок первого уровня из него же. Или можно сразу задать ему 

Кстати, если надо будет впихнуть картинку с диаграммой в этот ''/test/test.md'': 

''![example](../Диаграммы/img/example.svg)''

=== Поставить плагин include-markdown ===

Если очень нужно держать в проекте файл ''docs/index.md'' и отобразить //внутри него// содержимое файла ''/README.md''… или просто надо отобразить в каком-то md-файле содержимое любого другого md-файла — используем специальный плагин.

1. Погасить MkDocs полностью.
2. Установить плагин для включения содержимого md-файлов в другие md-файлы:

''pipx inject mkdocs mkdocs-include-markdown-plugin''

3. Добавить в mkdocs.yml вызов этого плагина:

''plugins:''
  ''- include-markdown''

4. В файл index.md вставить инструкцию для вызова содержимого readme:

''{% include "../README.md" %}''

Можно так вставить в одну страницу содержимое нескольких внешних страниц — на каждую по отдельной строке.

5. Запустить MkDocs.

==== Подтянуть картинки из внешних каталогов ====

По-умолчанию это невозможно. MkDocs вставит в файлы .md отсылки к картинкам из разных каталогов, но только если //все// они находятся где-то под каталогом ''docs/''. А я хочу подтянуть картинку из ''diagrams/example.svg''.

Решение:

1. сделать файл ''diagrams/diagrams.md''
2. зайти в каталог ''docs/''
3. создать относительный симлинк к каталогу

''ln -s ../diagrams Диаграммы''

В каталоге ''docs/'' появится симлинк “Диаграммы/”. MkDocs воспримет его как настоящий каталог, подчинённый ''docs/'' и создаст в меню раскрывающийся пункт с названием «Диаграммы» кириллицей, под которым будет содержимое файла ''diagrams/diagrams.md'', а названием файла будет заголовок первого уровня из этого ''diagrams.md''.

4. в файле ''mkdocs.yml'' добавить настройку для темы Material:

{{{code: lang="yaml" linenumbers="True"
theme:
  name: "material"
  static_templates:
    - Диаграммы/
}}}

И теперь в файл ''diagrams/diagrams.md'' можно вписать вызов картинки из каталога ''diagrams/img'':

'''
![Пример диаграммы из изображения](img/example.svg)
'''

Проблема в том, что в других файлах вызов той же картинки надо прописывать по-разному:

* docs/index.md = ''![example](Диаграммы/img/example.svg)''
* docs/Диаграммы/diagrams.md = ''![example](img/example.svg)''
* docs/api/functions.md = ''![example](../Диаграммы/img/example.svg)''

Причина: относительные пути MkDocs интерпретирует своеобразно, отсчитывая их от каталога, в котором находится каждый файл .md, и это надо однозначно учитывать, особенно когда надо будет какие-то файлы перетащить в другие каталоги.

==== Настроить ширину картинки ====

Добавить в файл mkdocs.yml

{{{code: lang="yaml" linenumbers="True"
# возможность задвать атрибуты вроде размера картинок
markdown_extensions:
  - attr_list
}}}

В нужный md-файл вставить

''![Это изображение](img/example.svg){: style="width:400px"}''

Картинка займет 400px в ширину.

=== Сделать картинку кликабельной ===

'''
[![Это изображение](img/example.svg){: style="width:400px"}](img/example.svg)
'''

По клику картинка шириной в 400px откроется в полный размер.

==== Диаграммы Mermaid JS ====

Погасить MkDocs.

Установить плагин

''pipx inject mkdocs mkdocs-mermaid2-plugin''

Вставить его в ''mkdocs.yml'':

{{{code: lang="yaml" linenumbers="True"
plugins:
  - mermaid2
}}}

Если надо уточнить версию Mermaid

{{{code: lang="yaml" linenumbers="True"
plugins:
  - search
  - mermaid2:
      version: 10.0.2
}}}

Чтобы получить расширенные возможности Mermaid, в том же ''mkdocs.yml'' надо добавить отдельный раздел:

{{{code: lang="yaml" linenumbers="True"
markdown_extensions:
  - pymdownx.superfences:
        # make exceptions to highlighting of code:
      custom_fences:
        - name: mermaid
          class: mermaid
          format: !!python/name:mermaid2.fence_mermaid_custom
}}}

Убедиться в том, что в ''mkdocs.yml'' нет

'''
markdown_extensions:
  - pymdownx.superfences # подсветка кода
'''

это расширение отменяет рендеринг диаграмм, они отображаются как код.

В нужный файл md вставить:

{{{code: lang="yaml" linenumbers="True"
```mermaid

graph TD;
A-->B;
B-->C;
C-->A;
```
}}}

Нельзя нарушать синтаксис: открывающие косые кавычки и объявление “mermaid” должны быть на одной линии. См. также про синтаксис Mermaid — https://mermaid.js.org/syntax/flowchart.html

Поднять MkDocs.

==== Подсветка кода ====

В ''mkdocs.yml'' добавить:

{{{code: lang="yaml" linenumbers="True"
markdown_extensions:
 - pymdownx.superfences # подсветка кода — отменяет рендеринг диаграмм
  - pymdownx.highlight:
	  anchor_linenums: true
	  line_spans: __span
	  pygments_lang_class: true
  - pymdownx.inlinehilite
  - pymdownx.snippets

}}}

В страницу вставить:

''```py title="add_numbers.py" linenums="1"''

''# Function to add two numbers''
''def add_two_numbers(num1, num2):''
	''return num1 + num2''

''# Example usage''
''result = add_two_numbers(5, 3)''
''print('The sum is:', result)''
''```''

Учесть, что включение //superfences// полностью отключает рендеринг диаграмм Mermaid (и это даже логично), которые делает плагин “mermaid2”. Если нужны и подсветка кода, и диаграммы, надо сделать насильное исключение через ''custom_fences'':

{{{code: lang="yaml" linenumbers="True"
plugins:
  - mermaid2
  
markdown_extensions:
  - pymdownx.superfences:
      custom_fences:
        - name: mermaid
          class: mermaid
          format: !!python/name:pymdownx.superfences.fence_code_format
  - pymdownx.highlight
  - pymdownx.inlinehilite
  - pymdownx.snippets
}}}

Но теперь оформление диаграмм полностью наследует настройке

''palette:''
	''accent: amber # или deep purple'' 

В целом это даже логичное единообразие оформления. Но если мешает — увы, когда-то можно было сделать отдельный css для оформления диаграмм, но это отключено. Поможет только полный форк плагина mermaid2.

==== Подтянуть документация по API из докстрингов ====

В md-файле, в котором надо это всё отобразить, надо прописать 

* или вызов информации из докстрингов для определенной функции, 
* или вызов всех докстрингов из всех функций определенного файла — если он оформлен как пакет через ''__init__.py''

Пример содержимого файла ''install_approach.md'', в котором появится информация о модулях из файла ''functions/files.py'':

{{{code: lang="markdown" linenumbers="True"
# Описание отдельной функции

Из пакета functions подтянуть описание функции (модуля) add_current_date_to_file_about:

::: functions.files.add_current_date_to_file_about

# Описание всех функций

Подтянуть описание всех функций (модулей) из пакета functions:

::: functions.files

Подтянуть описание всех функций (модулей) из пакета images:

::: functions.images
}}}

==== Экспорт файлов в html ====

По-умолчанию ''mkdocs serve'' запускает свой сервер, выполняет его и держит все файлы сайта в RAM. Чтобы получить набор файлов html, которые можно куда-то закинуть по ftp, надо: 

1. остановить сервер mkdocs, если он запущен — убить процесс через 

''pkill -f mkdocs'' 

убедиться в том, что сервер погашен:

''ps aux | grep mkdocs''

3. перейти в каталог с проектом — в его корне лежит файл ''mkdocs.yml''
4. выполнить 

''mkdocs build''

Появится новый каталог ''site/'' — в нем нужные файлы. Помним о том, что MkDocs превращает каждый обнаруженный файл *.md в каталог с файлом index.html внутри, и сервер, на который будут перекинуты все файлы, должен поддерживать автоматическое отображение //index.html// при заходе в каталог (обычно все это умеют, но мало ли).

==== Включить поиск ====

Погасить MkDocs

Установить плагин

{{{code: lang="yaml" linenumbers="True"
plugins:
  - search:
	  lang: # указать только нужные языки, не перегружать системы
		- ru
		- en
}}}

Поднять MkDocs.



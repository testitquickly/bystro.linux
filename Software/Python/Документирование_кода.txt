Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-07-30T14:16:31+03:00

====== Документирование кода ======

[ @python @doc @pydoc @pdoc @sphinx ]

===== Докстринги =====

Сперва во всех файлах с кодом нужно прописать документацию в виде докстрингов — текстовые описания модулей, функций, классов и методов в тройных кавычках в одной строке или на нескольких:

'''
def register_user(name: str, email: str) -> bool:
	"""Регистрирует нового пользователя.

	Args:
		name: Имя пользователя.
		email: Электронная почта.

	Returns:
		True, если регистрация прошла успешно.
	"""
'''

Без них экспортировать нечего, комментарии через ''#'' за документацию не считаются.

Формат докстрингов — markdown, поэтому можно вставлять заголовки, ссылки и изображения
* ссылка: ''[Zim](https://zim-wiki.org/)'' или просто https://github.com/zim-desktop-wiki/zim-desktop-wiki
* заголовок: ''##Текст''
* изображение: ''<img src="https://raw.githubusercontent.com/testitquickly/Software-Testing-Glossary/master/images/alexei_lupan.jpg" alt="Alexei Lupan" height="200" align="right" />''

===== Имя каталога проекта =====

Каталог с проектом в Python надо называть по шаблону ''word_word'' — это шаблон наименования пакетов. Детально об этих сущностях см. [[Модули, пакеты и классы]]

И когда в корне проекта будет создан пустой файл ''__init__.py'' — весь проект будет считаться пакетом Python.

* ''word_word'' — это имя пакета.
* файл ''__init__.py'' — модуль пакета ''word_word''.

С этого момента весь проект ''word_word'' можно будет импортировать в другой проект как обычный пакет…

===== Сборка документации =====

…ориентируется на пакеты и «модули в пакетах». 

Каталог считается пакетом, только если в нём есть файл ''__init__.py'', и только тогда будет прочитано содержимое модулей (''*.py''-файлов). Иначе все модули будут проигнорированы.

У сборщика есть параметр, который приказывает игорировать функции, классы и методы, у которых нет докстрингов (то есть без комментариев для документации).

===== Сборщики документации =====

==== pydoc ====

Самый простой инструмент, потому что умеет экспортировать только один файл за раз. В рекурсивность не умеет.

''pydoc -w main.py''

Создаст один файл main.html с документацией.

==== pdoc ====

Топ для инди-проектов.

Простейший способ автосборки документирования внутреннего программного интерфейса (API) для проекта. Обрабатывает все файлы в проекте рекурсивно, не требует настройки, полноценно поддерживает аннотацию типов, автоматически создает перекрёстные ссылки между элементами кода, включает встроенный веб-сервер с автообновлением и понимает докстринги в стилях numpydoc или Google. 

Умеет в ''--mermaid и'' [[GraphViz]]!

Установить:

''pipx install pdoc''

Зайти в каталог с проектом:

''pdoc . --output-dir docs; firefox docs/index.html''

В корне проекта будет создан каталог ''docs'', в котором появятся html-файлы. Команда ''gio open docs/index.html'' открывает сборку документации в новой вкладке дефолтного браузера в KDE.

Сообрать документацию по файлам (модулям) из отдельного каталога:

'''
pdoc functions/ --output-dir docs; firefox docs/index.html
'''

Учесть, что при сборке документации сперва будет инициирована сборка и выполнение проекта. Если проект еще не готов и есть ошибки, документация тоже не соберется.

=== Запуск без локальных модулей ===

Учесть, что ''pdoc'' запускается вне контекста, в котором проект нормально работает, и «не видит»  локальные модули. Например, в корне проекта, где лежит main.py, есть файл config.py (глобальные переменные), и он уже импортирован в main.py через команду ''import config'', но для ''pdoc'' это не аргумент, по-умолчанию он объявит об отсутствии модуля ''config'' и остановится. 

Решение — приказать Python искать модули в текущей директории (в которую мы уже зашли). Лучше сделать это отдельным скриптом:

{{{code: id="generate_docs" lang="sh" linenumbers="True"
#!/bin/bash

DOCS_DIR="docs"
LOGO_URL="https://testitquickly.com/wp-content/uploads/2021/09/favicon_lupan.jpg"
FOOTER_TEXT="testitquickly.com"

    # Переходим в корень проекта
cd "$(dirname "$0")/.."

# Ищем все подпапки с __init__.py,
# исключая корень проекта и каталоги /docs и /__pycache__
MODULES=$(find . -mindepth 2 -type f -name '__init__.py' \
	-not -path './docs/*' -not -path './*/__pycache__/*' \
	-exec dirname {} \; | sed 's|^\./||')

# если модули не найдены — прекратить работу
if [[ -z "$MODULES" ]]; then
echo "Нет валидных Python-модулей для документации."
exit 1
fi

# если модули найдены — вывести их список
echo "Модули:"
for mod in $MODULES; do
echo " - $mod"
done

echo -e "\n\tГенерирую документацию через pdoc"
PYTHONPATH=. pdoc . $MODULES \
	--output-dir docs \
	--mermaid \
	--show-source \
	--no-include-undocumented \
	--footer-text "$FOOTER_TEXT" \
	--logo "$LOGO_URL"

echo -e "\nОткрываю документацию"
firefox "$DOCS_DIR/index.html"

}}}

Тут в корневом каталоге проекта выполняется динамическая сборка списка всех ''*.py''-файлов и подкаталогов (кроме ''/docs'' и ''/__pycache__'', поэтому не приходится очищать кэш) и генерирование по ним документации.

И поскольку в главном каталоге лежит файл ''__init__.py'', то главный каталог проекта считается пакетом Python и содержимое его файла README.md может быть передано в index.html. Для этого в файл ''__init__.py'' надо записать инструкцию

''"""''
''.. include:: ./README.md''
''"""''

==== Sphinx ====

Топ для крупных проектов. Прям сервер.

Установить:

''pipx install sphinx sphinx-autodoc''

Инициализация:

''sphinx-quickstart''

В ''conf.py'' добавить 'sphinx.ext.autodoc', указать sys.path.

Сборка:

''make html''

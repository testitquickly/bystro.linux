Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-07-30T14:16:31+03:00

====== Документирование кода ======

[ @python @doc @pydoc @pdoc @sphinx ]

Сперва во всех файлах проекта нужно прописать документацию в виде докстрингов — текстовые описания модулей, функций, классов и методов в тройных кавычках 

'''
def register_user(name: str, email: str) -> bool:
	"""Регистрация нового пользователя.

	Args:
		name: Имя пользователя.
		email: Электронная почта.

	Returns:
		True, если регистрация прошла успешно.
	"""
'''

Без них экспортировать нечего, комментарии через ''#'' за документацию не считаются.

Формат докстрингов — markdown, поэтому можно вставлять заголовки, ссылки и изображения
* ссылка: ''[Zim](https://zim-wiki.org/)'' или просто https://github.com/zim-desktop-wiki/zim-desktop-wiki
* заголовок: ''##Текст''
* изображение: ''<img src="https://raw.githubusercontent.com/testitquickly/Software-Testing-Glossary/master/images/alexei_lupan.jpg" alt="Alexei Lupan" height="200" align="right" />''

Также сборка документации зависит от наличия файла ''__init__.py'' и в корне проекта, и в (почти) каждом его подкаталоге. В Python любая директория, в которой есть такой файл, считается //пакетом//, а сборщики документации именно на них и ориентируются.

===== pydoc =====

Самый простой инструмент, потому что умеет экспортировать только один файл за раз. В рекурсивность не умеет.

''pydoc -w main.py''

Создаст один файл main.html с документацией.

===== pdoc =====

Топ для инди-проектов.

Простейший способ автосборки документирования внутреннего программного интерфейса (API) для проекта. Обрабатывает все файлы в проекте рекурсивно, не требует настройки, полноценно поддерживает аннотацию типов, автоматически создает перекрёстные ссылки между элементами кода, включает встроенный веб-сервер с автообновлением и понимает докстринги в стилях numpydoc или Google. 

Умеет в ''--mermaid''!

Установить:

''pipx install pdoc''

Зайти в каталог с проектом:

''pdoc . --output-dir docs; gio open docs/index.html''

В корне проекта будет создан каталог ''docs'', в котором появятся html-файлы. Команда ''gio open docs/index.html'' открывает сборку документации в новой вкладке дефолтного браузера в KDE.

Сообрать документацию по файлам из отдельного каталога:

'''
pdoc functions/ --output-dir docs; gio open docs/index.html
'''

Учесть, что при сборке документации будет инициирована сборка и выполнение проекта. Если проект еще не готов и есть ошибки, документация не соберется. 

А ещё учесть, что ''pdoc'' запускается вне контекста, в котором проект нормально работает, и «не видит»  локальные модули. Например, в корне проекта, где лежит main.py, есть файл config.py (глобальные переменные), и он уже импортирован в main.py через команду ''import config'', но для ''pdoc'' это не аргумент, он объявит об отсутствии модуля ''config'' и остановится. 

Решение:

''PYTHONPATH=. pdoc . --output-dir docs --mermaid; gio open docs/index.html''

Также можно включить в файл ''__init__.py'' README проекта:

'''
"""
.. include:: ./README.md
"""
'''
Или подключить только часть из README.md (подразумеваем, что в README.md есть раздел «''Changelog''»):

''"""''
''.. include:: ./README.md''
   '':start-line: 3''
   '':end-before: Changelog''
''"""''

Также можно добавить plain text (ссылки — никак) на страницы документации через параметр

''--footer-text "testitquickly.com"''

Пример итоговой команды:

''PYTHONPATH=. pdoc . --output-dir docs --mermaid --show-source --no-include-undocumented --footer-text "testitquickly.com" --logo'' [[https://testitquickly.com/wp-content/uploads/2021/09/favicon_lupan.jpg|''https://testitquickly.com/wp-content/uploads/2021/09/favicon_lupan.jpg'']]''; gio open docs/index.html''

===== Sphinx =====

Для крупных проектов. Прям сервер.

Установить:

''pipx install sphinx sphinx-autodoc''

Инициализация:

''sphinx-quickstart''

В ''conf.py'' добавить 'sphinx.ext.autodoc', указать sys.path.

Сборка:

''make html''

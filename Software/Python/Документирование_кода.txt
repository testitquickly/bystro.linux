Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-07-30T14:16:31+03:00

====== Документирование кода ======

[ @python @doc @pydoc @pdoc @mkdocs @sphinx @pandoc ]

===== Докстринги =====

Сперва во всех файлах с кодом нужно прописать документацию в виде докстрингов — текстовые описания модулей, функций, классов и методов в тройных кавычках в одной строке или на нескольких:

'''
def register_user(name: str, email: str) -> bool:
	"""Регистрирует нового пользователя.

	Args:
		name: Имя пользователя.
		email: Электронная почта.

	Returns:
		True, если регистрация прошла успешно.
	"""
'''

Без них экспортировать нечего, комментарии через ''#'' за документацию не считаются.

Формат докстрингов — markdown, поэтому можно вставлять заголовки, ссылки и изображения
* ссылка: ''[Zim](https://zim-wiki.org/)'' или просто https://github.com/zim-desktop-wiki/zim-desktop-wiki
* заголовок: ''##Текст''
* изображение: ''<img src="https://raw.githubusercontent.com/testitquickly/Software-Testing-Glossary/master/images/alexei_lupan.jpg" alt="Alexei Lupan" height="200" align="right" />''

===== Имя каталога проекта =====

Каталог с проектом в Python надо называть по шаблону ''word_word'' — это шаблон наименования пакетов. Детально об этих сущностях см. [[Модули, пакеты и классы]]

И когда в корне проекта будет создан пустой файл ''__init__.py'' — весь проект будет считаться пакетом Python.

* ''word_word'' — это имя пакета.
* файл ''__init__.py'' — модуль пакета ''word_word''.

С этого момента весь проект ''word_word'' можно будет импортировать в другой проект как обычный пакет…

===== Сборка документации =====

…ориентируется на пакеты и «модули в пакетах». 

Каталог считается пакетом, только если в нём есть файл ''__init__.py'', и только тогда будет прочитано содержимое модулей (''*.py''-файлов). Иначе все модули будут проигнорированы.

У сборщика есть параметр, который приказывает игорировать функции, классы и методы, у которых нет докстрингов (то есть без комментариев для документации).

===== Сборщики документации =====

==== pydoc ====

''pydoc -w main.py''

Самый простой инструмент, потому что умеет экспортировать в html только //один// файл за раз. В рекурсивность не умеет.

==== pdoc ====

Топ для контроля за содержанием и оформлением API проекта — генерирует в связные html-страницы описание внутреннего программного интерфейса (API) для проекта на основе содержимого докстрингов функций.

Обрабатывает все файлы в проекте рекурсивно, само по себе не требует настройки, полноценно поддерживает аннотацию типов, автоматически создает перекрёстные ссылки между элементами кода, включает встроенный веб-сервер с автообновлением и понимает докстринги в стилях numpydoc или Google. 

Умеет в [[GraphViz]] (без сложного оформления) и [[+Диаграммы Mermaid JS]]

См. [[+pdoc]]

==== MkDocs ====

Тоже генератор связанных html-страниц, который не отменяет, а дополняет ''pdoc''.

Может собирать сайт из разрозненных статей, гайдов, туториалов из файлов Markdown, внутри которых можно автоматически подтягивать из докстрингов. Богат на плагины и расширяемость функциональности, требует какого-то времени на освоение.

См. [[+MkDocs]]

==== Sphinx ====

Топ для крупных проектов. Прям сервер. Со сложной настройкой и множеством возможностей. Если взлетит, то будет очень гибко: можно комбинировать статьи, туториалы и API-документацию. Ввиду сложной настройки в неумелых руках может больше раздражать, чем помогать.

Также Sphinx работает с текстами в формате reStructuredText вместо Markdown, и это надо отдельно изучить и понимать. MD рядом с RST как Mermaid рядом с GraphViz — первый очень простой, второй умеет делать сложную документацию с перекрёстными ссылками, автогенерацией индексов, сложные таблицы, PDF/ePub… Неизбежно было придумано промежуточное решение — MyST Markdown (расширенный Markdown, который понимает Sphinx).

См. [[+Sphinx]]

==== Pandoc ====

Это не «продвинутый pdoc», который генерирует API-документацию из docstring’ов. Это универсальный конвертер документов. Он может брать файлы в Markdown, reStructuredText, LaTeX, HTML, DOCX и др. и конвертировать в любой другой поддерживаемый формат — HTML, PDF, ePub, LaTeX и т.д. Он может собирать полноценную общирную документацию в виде (буквально) книг. Топ, если надо из проекта сделать, эээ, книгу, которую будут читать обыкновенные стейкхолдеры и заказчики. 

Обычно используется вместе с чем-то ( ''pdoc'' или ''sphinx''), а ''pandoc'' уже делает всю «книжную магию»: оглавления, шаблоны, типографику, LaTeX, pdf, ePub.

См. [[+Pandoc]]

Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-08-07T06:44:38+03:00

====== Модули, пакеты и классы ======

[ @python ]

===== Модуль =====

Каждый файл *.py — это модуль.

В его названии может быть или одно слово на английском языке, или несколько слов, которые разделяет нижнее подчеркивание.

* Файл ''abc.py'' считается модулем “abc”. 
* Файл ''abc_efd.py'' считается модулем “abc_efd”. 

Код из любого «видимого» модуля можно импортировать в другой модуль. Для этого файлы ''*.py'':

* или должны находиться в одном каталоге

''project/''
''├── main.py''
''└── abc_efd.py''

и тогда 

''import abc_efd''

* или должны находиться в подкаталоге

''project/''
''├── main.py''
''└── utils/''
	''├── __init__.py''
	''└── abc_efd.py''

и тогда

''from utils import abc_efd''

но для этого каталог /utils должен быть объявлен пакетом.

===== Пакет =====

Пакет в Python — это контейнер модулей (каталог с файлами).

Пакетом в Python считается любой каталог, в котором есть файл ''__init__.py'' — файл может быть пустой или с какими-то инструкциями, перечислением импорта ключевых компонентов (например, from .math_utils import add), установки переменных пакета… 

* Есть файл ''__init__.py'' — каталог считается пакетом. 
* Нет файла ''__init__.py'' — каталог считается просто каталогом, в котором есть какие-то модули или любые другие файлы.

Пакеты нужны для того, чтобы 

* структурировать код в проекте по логическим блокам. Например, можно разделить всё на network, database, utils, models, database…
* избежать конфликтов имён (в разных каталогах могут находиться файлы с одинаковым названием вроде utils.py, helpers.py и т.д.)
* упростить импорт модулей
* переиспользовать проект как библиотеку
* упорядочить автоматическую генерацию документации
* поддерживать относительный импорт

Пакеты сами по себе не импортируют, они только содержат:

* другие пакеты
* модули
* etc

То есть, в норме модули всегда лежат в каких-то пакетах. Модули импортируют из пакетов.

Как полагается любой советской кухне, в проекте может быть множество пакетов, и в каждом пакете может храниться неопределенное множество пакетов.

===== Класс =====

Класс — это шаблон для создания объектов (экземпляров).

А объекты (классы) всегда определяются внутри какого-то модуля, то есть, внутри ''*.py'' файлов. А модуль может быть в пакете. А пакет может быть в другом пакете…

Например:

''from export_bystro_linux.models.user import User''

Классы нужны для того, чтобы создавать новые объекты, которые наследуют свойства родительского объекта (у нас ООП).

===== Функция =====

Самостоятельный блок кода. Например:

'''
def say_hello(): 
    print("Hello")
'''
 
===== Метод =====

Это функция, которая принадлежит какому-то классу и работает с его объектами. 

''class Greeter:''
	''def say_hello(self):''
		  ''print("Hello")''


Без класса метод не существует.

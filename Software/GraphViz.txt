Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-08-11T14:56:29+03:00

====== GraphViz ======

@diagram @graphviz @mermaid @zim 

Я привык собирать диаграммы по текстовому описанию через «MermaidJS» — язык описания диаграмм с простым, читаемым синтаксисом, ориентированный на текстовое описание схемы в разметке Markdown и её рендеринг в браузере, JavaScript же.

В [[Zim]] аналогичные диаграммы можно сгенерировать через «ditaa» (вянет-пропадает) и «Graphviz DOT» — язык описания диаграмм, который пришёл из мира науки, более мощный и гибкий, чем MermaidJS, умеет делать очень сложные графы, рендерится оффлайн через CLI, генерирует изображения в PNG, SVG, PDF и др. Эдакий TikZ, но без [[LaTeX]] за спиной.

Код:

{{{code: id="diagram_example" lang="dot" linenumbers="True"
digraph СистемноеМышление {
	rankdir=TB; // направление раскладки графа: T — top (сверху), B — bottom (снизу)
	bgcolor="#1b1e20"; // Фон всей диаграммы — тёмно-серый

	// Заголовок: отдельный узел с особым рангом "source"
	title [label="Дума сэнсэя Иванова", shape=plaintext, fontsize=22, fontcolor="#cf9f50"];
	// Невидимые узлы слева и справа для центрирования заголовка
	left [label="", style=invis];
	right [label="", style=invis];
	// Чтобы все три были на одном уровне (ранге) — заголовок центрируется между ними
	{ rank=source; left; title; right; }

	// Настройки всех узлов
	node [
		fontcolor="#b2b2b2" // цвет текста и рамок (светло-серый) https://graphviz.org/doc/info/colors.html
		color="#b2b2b2" // цвет рамок (границ) узлов
		fillcolor="#1b1e20" // фон узлов — тёмно-серый
		style=filled // стиль заливки узла — залить цветом из fillcolor
		fontname="Ysabeau"
		fontsize="16"
	];

	// Настройки всех рёбер
	edge [
		arrowhead=open // глобальный тип стрелок https://graphviz.org/docs/attr-types/arrowType/
		color="#b2b2b2" // цвет линий и шрифта (светло-серый)
		fontname="Ysabeau"
		fontsize="16"
	];

	// нельзя сразу объявлять и соединять узлы, как в Mermaid
	// надо сперва расписать все сущности
	
	// можно задать отдельно форму каждому узлу: id2 [shape=box, label="Невод закинут в море"];
	// а можно их группировать 
	node [shape=octagon];
	S [label="Происходит жизнь"] // S = Start
	E [label="Разговор исчерпан"]; // E  End
		
	node [shape=none];
	сила_воли [label=<<s>Сила Воли</s>>]
	принуждение [label=<<s>Принуждение</s>>];
	проверка_боем [label="проверка боем", shape=box];

	node [shape=note];
	id1 [label="Самурай всё понимает", comment="I am node id1"];
	id2 [label="Невод закинут в море"];
	rybka [label="Мерзнет пингвин"];
	biblioteka [shape=plaintext, label="Понял в тишине библиотеки"];
	bookIsClosed [label="Книга недолго открыта"];
	
	node [shape=underline];
	как_думать [label="Самурай без меча"];
	gameOver [label="Демоны спёрли дыхание"];
	listOfEvents [label="• Некуда спешить\n• Не о чём думать\n• Начинается дождь", fontsize=12, fontcolor="Coral", color="DarkOrange"];
	
	// затем узлы можно соединять в самых причудливых сочетаниях
	
	сила_воли -> S;
	принуждение -> S;
	проверка_боем -> S;
	
	как_думать -> biblioteka [label=<<font color="yellow" point-size="13">Спросил у <i>ясеня</i></font>>];
	biblioteka -> listOfEvents;

	S -> id1;
	id1 -> id2 [arrowhead=tee]; // чтобы задать стиль отдельной стрелке, ноды одного пути надо разнести "две отдельно"
	id2 -> rybka -> listOfEvents -> E;
		
	listOfEvents -> gameOver -> bookIsClosed;
	
}
}}}

Результат:

{{./diagram.png?type=diagram}}

===== Важно понимать =====

==== 1 ====

Эта система задумана так, чтобы пользователь только описал узлы и ребра, а «неведомая магическая сила» сама их расставит на диаграмме так, как //ей// покажется лучше. А иногда хочется, чтобы «вот это было справа, и чтобы повыше…», и тогда начинается колдование. 

Таких желаний надо всячески избегать. Рекомендуется обойтись только ручным указанием направления стрелок:

''Повторяемость -> Планы [tailport=w, headport=w, minlen=3];''

Здесь:

* tailport - направление тела стрелки, 
* headport - направление головы стрелки, 
* n, e, s, w — стороны света по компасу
* minlen - длина стрелки

==== 2 ====

В процессе работы с диаграммами в Zim некоторые из них остаются, а другие удаляются. Файлы некоторых «удаленных» диаграмм (dot и png)  могут остаться на месте. Их можно удалить вручную, чтобы не плодить ненужное.

==== Включить модуль в Zim ====

''Правка''
''> Параметры''
''> Модули''
''> Вставка диаграм''

==== Вставить диаграмму в страницу ====

''Вставка''
''> Диаграмма'' 

Набрать код, проверить его корректность через «Предварительный просмотр». Если будут ошибки, картинка не появится.

После завершения редактирования к странице будет приложен файл ''*.dot'' и картинка:

* diagram.dot
* diagram.png

Если диаграмм будет несколько, файлы будут переименованы:

* diagram1.dot
* diagram1.png
* diagram2.dot
* diagram2.png

==== Отредактировать диаграмму ====

''Правой кнопкой по рисунку''
''> Редактировать''

===== Типы диаграмм =====

В Graphviz есть несколько движков компоновки графов (layout engines), которые определяют, как узлы и связи будут размещены на диаграмме. Основные из них: dot, neato, fdp, и у каждого свой подход.

==== dot ====

Ориентирован на ориентированные графы (с направленными связями): схемы зависимостей, диаграммы потока, DAG (Directed Acyclic Graph) — классический выбор для impact analysis.

Алгоритм: слой за слоем (hierarchical / Sugiyama method). Узлы выстроены сверху вниз, стрелки направлены вниз.

Внешний признак: объявление ''digraph'' и стрелки.

''digraph G {''
	''A -> B;''
	''B -> C;''
	''}''

{{./diagram004.png?type=diagram}}

{{{code: id="impact_graph" lang="dot" linenumbers="True"
digraph ImpactGraph {
	node [shape=ellipse, style=filled, color=lightgreen];
	Invoice -> Payment [label="depends"];
	Invoice -> DB [label="updates"];
	Payment -> DB;
}
}}}

{{./diagram006.png?type=diagram}}

==== neato ====

Для неориентированных графов: социальные графы, сети зависимостей без жёсткой иерархии. Хорош для визуализации сетей и связей без явного направления.

Алгоритм: force-directed. Узлы распределены равномерно и отталкиваются друг от друга, связи ведут себя как пружины, нет верх-низ, структура «распухает» в пространство..

Внешний признак: объявление ''graph'', нет стрелок и нет логического направления.

{{{code: id="simple_graph1" lang="dot" linenumbers="True"
graph G {
A -- B;
B -- C;
}
}}}

{{./diagram003.png?type=diagram}}

{{{code: id="simple_graph2" lang="dot" linenumbers="True"
graph G {
A -- B -- C;
B -- D -- A;
}
}}}

{{./diagram005.png?type=diagram}}

{{{code: id="complex_digraph" lang="dot" linenumbers="True"
digraph ImpactGraph {
	// Настройки узлов
	node [shape=box, style=filled, color=lightblue, fontname="Arial"];
	edge [fontname="Arial", fontsize=10, color=gray];

	// Пример узлов и зависимостей
	Invoice -> Payment [label="depends"];
	Invoice -> DB [label="updates"];
	Payment -> DB [label="reads/writes"];
	Invoice -> Customer [label="notifies"];
	Customer -> NotificationService [label="triggers"];

	// Можно добавить группировки
	subgraph cluster_db {
		label="Database";
		DB;
		Payment;
	}

	subgraph cluster_services {
		label="Services";
		Invoice;
		NotificationService;
		Customer;
	}
}
}}}

{{./diagram007.png?type=diagram}}


Ещё есть движок fdp, альтернатива neato, тоже для force-directed layout, но использует другой алгоритм оптимизации. Лучше справляется с ОЧЕНЬ большими графами, иногда быстрее сходится. Нужен, когда большие неориентированные графы, где neato «слипается» или узлы слишком близко. В Zim не использовал.

===== Примеры =====

Изучить возможности: https://graphviz.org/documentation/

Практически всё форматирование текста в узлах делается на html, который надо обернуть в дополнительные ''<…>''

==== Перечеркнуть текст ====

''сила_воли [label=<<s>Сила Воли</s>>];''

Можно применить ''shape = proteasesite'', но у узла также появится лишняя иконка.

==== Поменять цвет текста ====

''listOfEvents [label="йцукен", fontcolor="Coral"];''

==== Поменять размер шрифта ====

''listOfEvents [label="йцукен", fontsize=12];''

==== Поменять цвет самого узла ====

''listOfEvents [label="йцукен", color="DarkOrange"];''

==== Поменять цвет отдельных слов в узле ====

Это усложняет синтаксис, но это возможно.

''listOfEvents [label=<''
'''
	ОБЩИЙ ОБЗОР<BR/>
	<FONT COLOR="green4">
 	• сделано то…<BR/>
	• сделано сё…
	</FONT>
	>];
'''

==== Сгруппировать несколько узлов ====

{{{code: id="cluster_rassujdenie" lang="dot" linenumbers="True"
subgraph cluster_Рассуждение {
		label = <<font point-size="16" color="Gold">Рассуждение</font>>;
		color = "lightgrey";
		style = "rounded";

		Обзор -> Повторяемость;
		Повторяемость -> Обзор;
		Повторяемость -> Содрать_пластырь;
		Содрать_пластырь -> Повторяемость;
	}
}}}

Учесть, что это группирование условно, извне надо обратиться к определенному узлу внутри группы, обратить стрелку //к группе// невозможно, потому что кластер (subgraph cluster_...) сам по себе не является вершиной графа.

''Дискомфорт -> Обзор [tailport=e, headport=e, minlen=3];''

В данном случае от внешнего узла Дискомфорт пойдет стрелка к первому узлу в кластере Рассуждение — Обзор.

Для аккуратности зрительного представления можно управлять направлением ребра:

* ''tailport=e'' — с какой стороны света (квадрата) стрелка выходит от узла Дискомфорт
* ''headport=e'' — с какой стороны света (квадрата) стрелка зайдет к узлу Обзор
* ''minlen=3'' — минимальная длина стрелки

=== Обходные пути ===

== Оттенить стрелки ==

Лучший способ — задать цвет стрелок бледнее цвета узлов.

''node [shape=box, style=filled, fontname="Arial", fontsize=12, color=lightblue];''
''edge [fontname="Arial", fontsize=10, color=gray];''

Тогда их «заход» в область кластера будет восприниматься лучше.

== «Невидимый» узел ==

Создать внутри кластера «невидимый» узел — назовем его invisible. Основные свойства: 

''label="", style=invis, width=0''

{{{code: id="invisible_dot" lang="dot" linenumbers="True"
digraph G {
	rankdir=TB; // направление раскладки графа: T — top (сверху), B — bottom (снизу)
	bgcolor="#1b1e20"; // Фон всей диаграммы — тёмно-серый

	// Настройки всех узлов
	node [
		fontcolor="#b2b2b2" // цвет текста и рамок (светло-серый) https://graphviz.org/doc/info/colors.html
		color="#b2b2b2" // цвет рамок (границ) узлов
		fillcolor="#1b1e20" // фон узлов — тёмно-серый
		style=filled // стиль заливки узла — залить цветом из fillcolor
		fontname="Ysabeau"
		fontsize="16"
	];

	// Настройки всех рёбер
	edge [
		arrowhead=open // глобальный тип стрелок https://graphviz.org/docs/attr-types/arrowType/
		color="#b2b2b2" // цвет линий и шрифта (светло-серый)
		fontname="Ysabeau"
		fontsize="16"
	];
	
    subgraph cluster_Rassuzhdenie {
        label = <<font point-size="16" color="Gold">Рассуждение</font>>;
        color = "lightgrey";
        style = "rounded";

	// фиктивный узел для связей
        invisible [shape=point, label="", style=invis, width=0];
        Обзор -> Повторяемость;
        Повторяемость -> Обзор;
        Повторяемость -> Содрать_пластырь;
        Содрать_пластырь -> Повторяемость;
    }

    Дискомфорт -> invisible [lhead=cluster_Rassuzhdenie, minlen=3];
}

}}}

А при обращении к нему обязательно указать параметр ''lhead'' с именем кластера.

И поставить его первым в кластере, что необязательно, но сделает его заметным.

Указать связь от внешнего узла к invisible.

Graphviz нарисует стрелку к рамке кластера, а не к конкретному узлу. Эта стрелка тоже будет «внутри группы», но смотреться это будет лучше.

{{./diagram001.png?type=diagram}}

Злоупотреблять этим приемом не надо.

==== Стиль стрелок с прямыми углами (органиграмма) ====

В начале диаграммы указать глобальный параметр

''splines=ortho;''

==== Перенос строк в узле ====

Через символ ''\n''

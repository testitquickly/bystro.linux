Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-08-08T15:52:17+03:00

====== VSCodium ======

[ @ide @microsoft @electron @keyboard @llm @ai ]

https://vscodium.com — это опенсоурсный форк VS Code, опенсоурсной IDE от Microsoft, которая является облегчённой версией Visual Studio. 

По интерфейсу и функционалу в принципе идентична VS Code, только 

* [[https://github.com/VSCodium/vscodium/blob/master/docs/telemetry.md|частично]] убрана встроенная телеметрия и сбор данных (к расширениям это не относится), 
* есть поддержка почти всех расширений из майкрософтовского “VS Code Marketplace”, однако не у всех. Некоторые оригинальные расширения на VSCodium встанут, но не захотят работать. Для VSCodium ставить расширения только из https://open-vsx.org/ через файлы ''*.vsix''

[[https://github.com/VSCodium/vscodium/blob/master/docs/migration.md#manual-migration|Миграция]] профиля из VS Code в VSCodium выполняется вручную.

===== Установить =====

* [[Debian:Install:VSCodium]]

===== Базовые настройки =====

Их ОЧЕНЬ много. Большинство управляются как в [[Sublime]], через вызов палитры команд по ''Ctrl+Shift+P'' и наборе нужной настройки словами. Например:

''> Preferences: Open Keyboard Shortcuts (JSON)''

Из Sublime в VS Code даже можно импортировать настройки чуть менее, чем полностью. Все настройки VSCodium идентичны VS Code.

Кстати, в [[Zim]] тоже есть модуль «Палитра команд», который вызывается по ''Ctrl+Shift+P'' (его сперва надо «включить»).

===== Плагины =====

Устанавливаются в разделе Extensions — в левом меню. 

Безусловно нужные (по алфавиту):

* Continue ([[Common:LLM:Подключить к IDE локальный LLM]])
* GitGraph
* GitHistory
* Open Remote - SSH
* Playwright Test for VSCode + TestDriver
* Pyright (анализ кода)
* Python
* Python Debugger
* Python Envy
* Ruff (строгий линтер)

Если нужен Github Copilot (предсказания и подсказки в наборе текста, auto-fix на каждый чих линтера) — его надо сперва включить и настроить в своём профиле на https://github.com/settings/copilot/features затем уже добавлять его в VS Code. Когда подключен, можно постоянно отслеживать расход его ресурсов в статус-баре в нижней части окна. 

===== Git =====

Надо привыкнуть к тому, что в VS Code нельзя «правой кнопкой выбрать отдельный файл из списка измененных» и сделать с ним коммит. Надо:

1. в ''Source control > CHANGES'' добавить нужный файл (или несколько) из списка измененных в Stage changes через всплывающую кнопку [+] поверх имени файла под курсором.
2. написать комментарий и засабмитить изменения. 
3. отдельно выполнить ''Push''

“Push” находится в 

''Source control > CHANGES > … >''

или в

''Source control > GRAPH'' по кнопке [Push].

==== Неочевидное ====

Нельзя начинать комментарий с [''+''], он превратится в буллит несуществующего списка.

Revert я не нашел, но в консоли можно делать вообще всё, что может понадобится. Ammend last commit тоже не увидел.

Список всех коммитов см. через ''Source control > GRAPH'' по всплывающей кнопке [View Git Graph].

Во многом есть смысл продолжать пользоваться git предпочитаемым способом, из консоли или через тот же [[SmartGit]]. В корпоративной разработке полезно расширение GitLens (местами платное) — хотя бы и тем, что само проверяет обновления файлов. Для индивидуальных индивидуалов избыточно.

===== Назначить main.py ключевым файлом запуска проекта =====

В разделе Run and Debug клик по шестеренке (Open launch.json). Это файл в каталоге проекта:

''/.vscode/launch.json''

Указать настройки:

{{{code: id="launch" lang="json" linenumbers="True"
{
	"configurations": [
		{
			"name": "main.py",
			"type": "debugpy",
			"request": "launch",
			"program": "${workspaceFolder}/main.py"
		}
	]
	}	
}}}

Теперь неважно, какой файл открыт и в фокусе — выполнение начнется с файла ''main.py''

===== Отключить автозамену на пробелы =====

Эта настройка зависит от общего соглашения о стиле кода. В норме одним уровнем отступа строки от левого края считают четыре пробела, и VS Code по-умолчанию настроен на «четыре пробела». Мне удобнее символ Tab. 

В любом случае, в совместных проектах Python надо использовать для отступа строк только пробелы ИЛИ только табы, не смешивая. Возможно, разумно назначить на [Tab] добавление отступа в четыре пробела, чтобы не напрягать всю четырехпробельную команду разработки.

==== Быстрый фикс ====

Если уже вставлен код с табами и пробелами:

* Выделить текст (Ctrl+A)
* Нажать Shift+Tab → Tab (приведёт отступы к табам)
* Либо Ctrl+Shift+P → Convert Indentation to Tabs

==== Скрипт для замены символов ====

Можно сделать bash-скрипт, который будет заходить в файлы .py, которые были изменены за последние 15 минут, и менять четыре пробела на один символ Tab: 

{{{code: id="replace_spaces_tabs" lang="sh" linenumbers="True"
#!/bin/bash

# Переход из каталога /bash в корень проекта
ROOT_DIR="$(realpath "$(dirname "$0")/..")"

# Проверка наличия main.py в корне проекта, иначе остановка
if [[ ! -f "$ROOT_DIR/main.py" ]]; then
    echo "Ошибка: файл main.py не найден в $ROOT_DIR"
    exit 1
fi

# Поиск .py-файлов, которые были изменёны за последние 15 минут, AND игнор всех скрытых директорий
find "$ROOT_DIR" \
    -type d -name ".*" -prune -o \
    -type f -name "*.py" -mmin -15 -print | while read -r file; do
        echo "Обрабатывается: $file"
        sed -E ':a; s/^((\t)*)(    )/\1\t/; ta' "$file" > "$file.tmp" && mv "$file.tmp" "$file"
done
}}}

Но это спасает только от случайности или от появления четырех пробелов после вставки кода в файл из внешнего источника.

==== Отключить Editor: Insert Spaces ====

1. Открыть Settings (''Ctrl+,'' или Файл → Параметры → Настройки)
2. Найти параметр Editor: Insert Spaces
3. Снять галочку

==== Установить Editor: Tab Size = 4 ====

1. Найти параметр Editor: Detect Indentation
2. Поставить галочку
3. Задать ширину табуляции (Editor: Tab Size) = 4 

===== Кейбиндинг =====

[[+Кейбиндинг]]

===== Свернуть все строки =====

По-умолчанию:

''Ctrl + K, 0'' (ноль)

То есть:

1. нажать ''Ctrl''
2. затем нажать и отпустить ''K'', продолжая удерживать ''Ctrl''
3. нажать ''0''

==== Развернуть все строки ====

''Ctrl + K, J''

==== Cвернуть/развернуть текущий блок ====

По-умолчанию привязано к english-раскладке:

* ''Ctrl + Shift + ['' 
* ''Ctrl + Shift + ]''

Переназначить: сперва посмотреть, не занято ли новое сочетание клавиш чем-то уже полезным, но пока неочевидным. Если нет, открыть меню Keyboard Shortcuts:

* или через меню: File → Preferences → Keyboard Shortcuts
 * или через ''Ctrl + K, S''

В поиске ввести:

* Fold — для сворачивания
* Unfold — для разворачивания

Найти команды:

* Fold (Ctrl+Shift+[) — команда editor.fold
* Unfold (Ctrl+Shift+]) — команда editor.unfold

Нажать на значок карандаша справа от команды, чтобы изменить комбинацию, затем нажать новую комбинацию клавиш.

Если старая комбинация мешает, ее можно удалить кликом по кресту рядом.

===== Настроить перетаскивание строки по Ctrl+Up/Down =====

В VS Code по умолчанию строки кода перемещаются Alt+Up/Down. Я привык к Ctrl+Up/Down.

Открыть палитру команд: Ctrl+Shift+P

''> Preferences: Open Keyboard Shortcuts (JSON)''

Вставить:

{{{code: id="move_lines" lang="json" linenumbers="True"
 [
 	{
        "key": "ctrl+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction"
    }
]
}}}

Команда "''-editor.action.moveLinesUpAction''" отменяет глобальное назначение передвижения строки по alt+Up/Down.

===== Подключить локальный LLM =====

См. [[Common:LLM:Подключить к IDE локальный LLM]]

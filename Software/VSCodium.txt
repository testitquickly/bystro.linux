Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-08-08T15:52:17+03:00

====== VSCodium ======

[ @ide @microsoft @electron @keyboard @llm @ai @images ]

https://vscodium.com — это опенсоурсный форк VS Code, опенсоурсной IDE от Microsoft, которая является облегчённой версией Visual Studio. 

По интерфейсу и функционалу в принципе идентична VS Code, только 

* [[https://github.com/VSCodium/vscodium/blob/master/docs/telemetry.md|частично]] убрана встроенная телеметрия и сбор данных (к расширениям это не относится), 
* есть поддержка почти всех расширений из майкрософтовского “VS Code Marketplace”, однако не у всех. Некоторые оригинальные расширения на VSCodium встанут, но не захотят работать. Для VSCodium ставить расширения только из https://open-vsx.org/ через файлы ''*.vsix''

[[https://github.com/VSCodium/vscodium/blob/master/docs/migration.md#manual-migration|Миграция]] профиля из VS Code в VSCodium выполняется вручную.

===== Установить =====

* [[Debian:Install:VSCodium]]

===== Базовые настройки =====

Их ОЧЕНЬ много. Большинство управляются как в [[Sublime]], через вызов палитры команд по ''Ctrl+Shift+P'' и наборе нужной настройки словами. Например:

''> Preferences: Open Keyboard Shortcuts (JSON)''

См. полный файл [[+settings.json]]

Из Sublime в VS Code даже можно импортировать настройки чуть менее, чем полностью. Все настройки VSCodium идентичны VS Code.

Кстати, в [[Zim]] тоже есть модуль «Палитра команд», который вызывается по ''Ctrl+Shift+P'' (его сперва надо «включить»).

===== Плагины =====

Они же «расширения», устанавливаются в разделе Extensions — в левом меню. 

Их файлы хранятся в каталоге ''~/.vscode-oss/extensions''

Не все плагины VS Code будут работать в VSCodium. Некоторые (например, важные ''Pylance'' и ''Python Environments'') могут объявить «This extension is no longer available on the Extension Marketplace». Поэтому для VSCodium разумно всегда брать опен-соурсные аналоги нужных расширений не из VSCodium > EXTENSIONS: MARKETPLACE, а с https://open-vsx.org — файлы в формате ''*.vsix''

* зайти на страницу расширения
* внизу справа найти кнопку [Download]
* скачать файл ''*.vsix''
* установить его через VSCodium > Extensions > кнопку с тремя точками (...) > Install from VSIX... > выбрать ''*.vsix'' файл.

Некоторые файлы vsix — это те же опенсоурс-проприетарные от MS, но переписанные, их можно идентифицировать по приписке «published by Open-VSX». Пример — [[https://open-vsx.org/extension/ms-python/python|ms-python]] 

Вместо оригинального ''Pylance'' надо взять [[https://open-vsx.org/extension/ms-pyright/pyright|Pyright]] в формате vsix — это тот же движок, на котором построен Pylance, и тоже выпущен Microsoft, но в open-source виде. Без него не будет перехода в модули по клику по имени и ряд других возможностей.

Линтер и форматтер — [[https://open-vsx.org/extension/charliermarsh/ruff|Ruff]] (или Black Formatter).

И еще VSCodium нужен [[https://open-vsx.org/extension/teticio/python-envy|Python Envy]] для автоматизации запуска виртуального окружения Python.

Рекомендуется перезапускать VSCodium после установки нового расширения.

==== Безусловно нужные ====

* [[https://open-vsx.org/extension/ms-python/python|Python]]
* Python Debugger
* Python Envy
* GitGraph
* GitHistory
* Pyright (анализ кода)
* Ruff (строгий линтер)
* [[https://open-vsx.org/extension/redhat/vscode-yaml|YAML]]
* Continue (см. [[+Подключить LLM]])
* Playwright Test for VSCode + TestDriver (см. [[Playwright]])

==== Возможно, будут полезны ====

* [[https://open-vsx.org/extension/MermaidChart/vscode-mermaid-chart|Mermaid Chart]]
* Dependi
* Markdown Table Formatter
* Ollama Autocoder
* Commit Message Formatter
* Comment Box
* Better Comments Next

===== Git =====

Надо привыкнуть к тому, что в VS Code нельзя «правой кнопкой выбрать отдельный файл из списка измененных» и сделать с ним коммит. Надо:

1. в ''Source control > CHANGES'' добавить нужный файл (или несколько) из списка измененных в Stage changes через всплывающую кнопку [+] поверх имени файла под курсором.
2. написать комментарий и засабмитить изменения. 
3. отдельно выполнить ''Push''

“Push” находится в 

''Source control > CHANGES > … >''

или в

''Source control > GRAPH'' по кнопке [Push].

Или можно ничего не добавлять по-отдельности, а написать общее сообщение о коммите и нажать [Commit] — будет вопрос «Добавить ли все измененные файлы в коммит?» и предложение «Делать так всегда» (не надо). 

==== Неочевидное ====

Нельзя начинать комментарий с [''+''], он превратится в буллит несуществующего списка.

Revert коммитов есть. 

Ammend last commit прячется под стрелкой на кнопке Submit.

Список всех коммитов см. через ''Source control > GRAPH'' по всплывающей кнопке [View Git Graph].

Во многом есть смысл продолжать пользоваться git предпочитаемым способом, из консоли или через тот же [[SmartGit]]. В корпоративной разработке полезно расширение GitLens (местами платное) — хотя бы и тем, что само проверяет обновления файлов. Для индивидуальных индивидуалов избыточно.

===== Настроить интерпретатор .venv =====

После включения плагина ms-python VSCodium автоматически создаёт и запускает виртуальное окружение Python в каталоге с проектом Python. Надо вручную перепроверить и настроить, что именно и как он запускает. Иногда VSCodium говорит, что использует .venv, а по факту виртуальное окружение не активно.

==== .venv проекта ====

Этот подход рекомендуется, особенно в групповой разработке, потому что «всё, что связано с проектом, следует держать в каталоге проекта». Настройку виртуального окружения Python в принципе полагается делать в самом начале работы над новым проектом. 

В корне проекта:

1. создать вручную виртуальное окружение с общим названием “''.venv''”

''python3 -m venv .venv''

В проекте появится каталог ''.venv''.

2. запустить это виртуальное окружение

''source .venv/bin/activate''

3. проверить, какой интерпретатор используется в этой виртуалке

''which python''

Ожидаемый ответ: ''/ПОЛНЫЙ_ПУТЬ_К_ПРОЕКТУ/.venv/bin/python''

Любой другой ответ вроде ''/usr/bin/python'' означает проблему.

Заодно можно глянуть в файл “''/.vscode/settings.json''”. Добавить в него две строки:

''"python.defaultInterpreterPath": "${workspaceFolder}/.venv/bin/python",''
''"python.venvPath": "${workspaceFolder}/.venv"''

Сохранить.

В правом нижнем углу VSCodium есть кнопка настройки venv — открывает окно выбора Select Interpteter — выбрать //Use Python from 'python.defaultInterpreterPath' setting ./venv/bin/python//

{{../../images/VSCodium-select-Python-interpreter.png}}

Перезапустить VSCodium.

В проекте поднять виртуальное окружение  (через ''source .venv/bin/activate'' или через выполнение какого-то из файлов в проекте). Проверить, какой интерпретатор используется в этой виртуалке

''which python''

Ожидаемый ответ: ''/ПОЛНЫЙ_ПУТЬ_К_ПРОЕКТУ/.venv/bin/python''

Установить какой-то пакет:

''pip install markdown''

Пакет должен быть успешно установлен в указанное виртуальное окружение Python и НЕ должен быть доступен вне её.

Импортировать пакет в любой модуль:

''import markdown''

Иногда для того, чтобы пакет подхватился, надо или перезапустить виртуалку, или весь VSCodium.

==== global .venv ====

Это Python, который работает в системе. В норме в него нельзя ничего устанавливать через ''pip'', но можно через ''pipx''.

Если не нужно ничего особенного, и все питоновские пакеты будут переиспользоваться в разных проектах, то в каждом проекте VSCodium можно использовать глобальный (системный) интерпретатор. Для одиночек норм.

В правом нижнем углу VSCodium есть кнопка настройки .venv, которая открывает выбор “Select Interpteter” — выбрать путь к интепретатору Python с пометкой Global.

===== Настроить профиль консоли =====

По-умолчанию во вкладку Console будет подтягиваться системный bash, который читает настройки из файла ''~/.bashrc'' В принципе этого должно быть достаточно. Если по каким-то соображениям нужен другой профиль консоли, например, с отдельными алиасами или без [[Списки задач:ToDo в консоли]], надо:

1. сделать отдельный профиль для консоли
2. настроить в VSCodium его использование

==== Сделать файл профиля ====

1. В каталоге проекта (ну а где же еще?) сделать файл ''.bashrc'' и записать в него нужные инструкции (или скопировать существующий и удалить из него всё ненужное).
2. В настройках VSCodium (~/.config/VSCodium/User/settings.json) найти "terminal.integrated.profiles.linux".

Добавить новый профиль двумя командами:

{{{code: lang="json" linenumbers="True"
{
  "terminal.integrated.profiles.linux": {
    "bash-current-project": {
        "path": "/bin/bash",
        "args": ["--rcfile", "${workspaceFolder}/.bashrc"]
    }
  },
  "terminal.integrated.defaultProfile.linux": "bash-current-project"
}
}}}

 Переменная ${workspaceFolder} — это встроенная переменная VSCodium для пути к корню проекта.

Если в том же файле есть настройки для выбора профиля консоли вроде 

'''
"terminal.external.linuxArgs": [
	"--profile astenix"
],
'''

их надо убрать.

3. Настроить профиль для консоли.

Во вкладке консоли:
> раскрыть выпадающий список “Launch Profile” 
> Select Default Profile 
> выбрать “bash-current-project”

Снова во вкладке консоли:
> раскрыть выпадающий список “Launch Profile” 
> выбрать “bash-current-project”

Можно перезапустить VSCodium чтобы убедиться, что настройка выбора профиля консоли сохранилась.

===== Назначить main.py ключевым файлом запуска проекта =====

На самом деле это называется «настроить дебаггер» и это настраивается в каждом проекте отдельно.

* в каталоге проекта создать файл ''main.py''
* в каталоге проекта создать подкаталог с файлом настроек: ''/.vscode/launch.json''

Настройки:

{{{code: id="launch" lang="json" linenumbers="True"
{
	"configurations": [
		{
			"name": "main.py",
			"type": "debugpy",
			"request": "launch",
			"program": "${workspaceFolder}/main.py",
			"console": "integratedTerminal"
		}
	]
}
}}}

Теперь неважно, какой файл открыт и в фокусе — выполнение начнется с файла ''main.py''

Этот же файл с настройками может быть создан в разделе Run and Debug 
> клик по линку “create a launch.json file”
> выбрать a workspace folder “каталог_своего_проекта”
> выбрать дебаггер “Python Debugger > Python File”
откроется файл launch.json > вставить в него настройки. 

В разделе Run and Debug  появится опция “main.py”, управлять ею можно кликом по шестеренке (Open launch.json). 

Можно настроить несколько профилей дебаггера и переключаться между ними при необходимости.

===== Отключить автозамену на пробелы =====

Эта настройка зависит от общего соглашения о стиле кода. В норме одним уровнем отступа строки от левого края считают четыре пробела, и VS Code по-умолчанию настроен на «четыре пробела». Мне удобнее символ Tab. 

В любом случае, в совместных проектах Python надо использовать для отступа строк только пробелы ИЛИ только табы, не смешивая. Возможно, разумно назначить на [Tab] добавление отступа в четыре пробела, чтобы не напрягать всю четырехпробельную команду разработки.

==== Быстрый фикс ====

Если уже вставлен код с табами и пробелами:

* Выделить текст (Ctrl+A)
* Нажать Shift+Tab → Tab (приведёт отступы к табам)
* Либо Ctrl+Shift+P → Convert Indentation to Tabs

==== Скрипт для замены символов ====

Можно сделать bash-скрипт, который будет заходить в файлы .py, которые были изменены за последние 15 минут, и менять четыре пробела на один символ Tab: 

{{{code: id="replace_spaces_tabs" lang="sh" linenumbers="True"
#!/bin/bash

# Переход из каталога /bash в корень проекта
ROOT_DIR="$(realpath "$(dirname "$0")/..")"

# Проверка наличия main.py в корне проекта, иначе остановка
if [[ ! -f "$ROOT_DIR/main.py" ]]; then
    echo "Ошибка: файл main.py не найден в $ROOT_DIR"
    exit 1
fi

# Поиск .py-файлов, которые были изменёны за последние 15 минут, AND игнор всех скрытых директорий
find "$ROOT_DIR" \
    -type d -name ".*" -prune -o \
    -type f -name "*.py" -mmin -15 -print | while read -r file; do
        echo "Обрабатывается: $file"
        sed -E ':a; s/^((\t)*)(    )/\1\t/; ta' "$file" > "$file.tmp" && mv "$file.tmp" "$file"
done
}}}

Но это спасает только от случайности или от появления четырех пробелов после вставки кода в файл из внешнего источника.

==== Отключить Editor: Insert Spaces ====

1. Открыть Settings (''Ctrl+,'' или Файл → Параметры → Настройки)
2. Найти параметр Editor: Insert Spaces
3. Снять галочку

==== Установить Editor: Tab Size = 4 ====

1. Найти параметр Editor: Detect Indentation
2. Поставить галочку
3. Задать ширину табуляции (Editor: Tab Size) = 4 

===== Кейбиндинг =====

[[+Кейбиндинг]]

===== Свернуть все строки =====

По-умолчанию:

''Ctrl + K,0'' (ноль)

То есть:

1. нажать ''Ctrl''
2. продолжая удерживать ''Ctrl'', нажать и отпустить ''K'', 
3. нажать ''0''

==== Развернуть все строки ====

''Ctrl + K,J''

==== Cвернуть/развернуть текущий блок ====

По-умолчанию привязано к english-раскладке:

* ''Ctrl + Shift + ['' 
* ''Ctrl + Shift + ]''

Переназначить: сперва посмотреть, не занято ли новое сочетание клавиш чем-то уже полезным, но пока неочевидным. Если нет, открыть меню Keyboard Shortcuts:

* или через меню: File → Preferences → Keyboard Shortcuts
 * или через ''Ctrl + K, S''

В поиске ввести:

* Fold — для сворачивания
* Unfold — для разворачивания

Найти команды:

* Fold (Ctrl+Shift+[) — команда editor.fold
* Unfold (Ctrl+Shift+]) — команда editor.unfold

Нажать на значок карандаша справа от команды, чтобы изменить комбинацию, затем нажать новую комбинацию клавиш.

Если старая комбинация мешает, ее можно удалить кликом по кресту рядом.

===== Настроить перетаскивание строки по Ctrl+Up/Down =====

По умолчанию строки кода перемещаются Alt+Up/Down. Я привык к Ctrl+Up/Down.

Открыть палитру команд: Ctrl+Shift+P

''> Preferences: Open Keyboard Shortcuts (JSON)''

Вставить:

{{{code: id="move_lines" lang="json" linenumbers="True"
 [
 	{
        "key": "ctrl+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction"
    }
]
}}}

Команда "''-editor.action.moveLinesUpAction''" отменяет глобальное назначение передвижения строки по alt+Up/Down.

См. полный [[+Кейбиндинг]]

===== Подключить локальный LLM =====

[[+Подключить LLM]]

===== Настроить Playwright =====

[[Playwright]]

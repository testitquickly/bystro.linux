Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-08-08T15:52:17+03:00

====== VS Code ======

[ @ide @microsoft @electron @keyboard @llm @ai ]

Это IDE от Microsoft, полностью называется Visual Studio Code. Задумана как облегченная версия Visual Studio. Бесплатная, платными могут быть расширения. Кроссплатформенная, потому что внутри Electron.

Есть её форк VSCodium — https://vscodium.com/ — полностью открытый исходный код, убрана встроенная телеметрия и сбор данных, интерфейс и функционал почти идентичны VS Code (IntelliSense, отладка, git, терминал), есть поддержка всех расширений из “VS Code Marketplace”. [[https://github.com/VSCodium/vscodium/blob/master/docs/migration.md#manual-migration|Миграция]] профиля на VSCodium выполняется вручную.

===== Установить =====

* [[Debian:Install:VS Code]]

===== Базовые настройки =====

Выполняются при установке. Если нужен GitHub Copilot, то его сперва надо настроить в своем профиле на github.com

Настроек ОЧЕНЬ много. Большинство управляются как в [[Sublime]] через вызов палитры команд по ''Ctrl+Shift+P'' и наборе нужной настройки словами, например:

''> Preferences: Open Keyboard Shortcuts (JSON)''

Из Sublime в VS Code даже можно импортировать настройки чуть менее, чем полностью.

Кстати, в [[Zim]] тоже есть модуль «Палитра команд», который вызывается по ''Ctrl+Shift+P'' (его сперва надо включить).

===== Плагины =====

Устанавливаются в разделе Extensions — в левом меню. 

Безусловно нужные

* Python
* Python Debugger
* Python Environments
* Pylance (нестрогий линтер)
* Ruff (строгий линтер)
* GitGraph
* GitHistory

Прочие

* Github Copilot (предсказания и подсказки в наборе текста, auto-fix на каждый чих линтера; его надо сперва включить и настроить в своём профиле на https://github.com/settings/copilot/features затем уже добавлять его в VS Code. Если подключен, можно постоянно отслеживать расход его ресурсов в статус-баре в нижней части окна)
* чат с другой моделью (Copilot хорош в подсказках, но слаб в аналитике и объяснениях)
* Playwright Test for VSCode
* GitLens (для индивидуальных индивидуалов избыточен; в платной версии полезен в корпоративной разработке) 

===== Git =====

Надо привыкнуть к тому, что в VS Code нельзя напрямую выбрать отдельный файл из списка измененных и сделать с ним коммит. 

1. Сперва надо в ''Source control > CHANGES'' добавить нужный файл (или несколько) из списка измененных в Stage changes через всплывающую кнопку [+] поверх имени файла под курсором.
2. Затем написать комментарий и засабмитить изменения. 
3. После этого отдельно выполнить ''Push''

Push находится в

''Source control > CHANGES > … >''

или в

''Source control > GRAPH'' по кнопке [Push].

Revert я не нашел, но в консоли можно делать вообще всё, что может понадобится. Ammend last commit тоже не увидел.

Список всех коммитов см. через ''Source control > GRAPH'' по всплывающей кнопке [View Git Graph].

Во многом есть смысл продолжать пользоваться git предпочитаемым способом, из консоли или через тот же [[SmartGit]].

===== Назначить main.py ключевым файлом запуска проекта =====

В разделе Run and Debug клик по шестеренке (Open launch.json). Это файл в каталоге проекта:

''/.vscode/launch.json''

Указать настройки:

{{{code: id="launch" lang="json" linenumbers="True"
{
	"configurations": [
		{
			"name": "main.py",
			"type": "debugpy",
			"request": "launch",
			"program": "${workspaceFolder}/main.py"
		}
	]
	}	
}}}

Теперь неважно, какой файл открыт и в фокусе — выполнение начнется с файла ''main.py''

===== Отключить автозамену на пробелы =====

Эта настройка зависит от общего соглашения о стиле кода. В норме одним уровнем отступа строки от левого края считают четыре пробела, и VS Code по-умолчанию настроен на «четыре пробела». Мне удобнее символ Tab. 

В любом случае в проекте Python надо использовать для отступа строк или только пробелы, или только табы.

==== Быстрый фикс ====

Если уже вставлен код с табами и пробелами:

* Выделить текст (Ctrl+A)
* Нажать Shift+Tab → Tab (приведёт отступы к табам)
* Либо Ctrl+Shift+P → Convert Indentation to Tabs

==== Скрипт для замены символов ====

Можно сделать bash-скрипт, который будет заходить в файлы .py, которые были изменены за последние 15 минут, и менять четыре пробела на один символ Tab: 

{{{code: id="replace_spaces_tabs" lang="sh" linenumbers="True"
#!/bin/bash

# Переход из каталога /bash в корень проекта
ROOT_DIR="$(realpath "$(dirname "$0")/..")"

# Проверка наличия main.py в корне проекта, иначе остановка
if [[ ! -f "$ROOT_DIR/main.py" ]]; then
    echo "Ошибка: файл main.py не найден в $ROOT_DIR"
    exit 1
fi

# Поиск .py-файлов, которые были изменёны за последние 15 минут, AND игнор всех скрытых директорий
find "$ROOT_DIR" \
    -type d -name ".*" -prune -o \
    -type f -name "*.py" -mmin -15 -print | while read -r file; do
        echo "Обрабатывается: $file"
        sed -E ':a; s/^((\t)*)(    )/\1\t/; ta' "$file" > "$file.tmp" && mv "$file.tmp" "$file"
done
}}}

Но это спасает только от случайности или от появления четырех пробелов после вставки кода в файл из внешнего источника.

==== Отключить Editor: Insert Spaces ====

1. Открыть Settings (''Ctrl+,'' или Файл → Параметры → Настройки)
2. Найти параметр Editor: Insert Spaces
3. Снять галочку

==== Установить Editor: Tab Size = 4 ====

1. Найти параметр Editor: Detect Indentation
2. Поставить галочку
3. Задать ширину табуляции (Editor: Tab Size) = 4 

===== Кейбиндинг =====

Некоторые сочетания клавиш редактируются через GUI:

Вызвать палитру команд через ''Ctrl+Shift+P'' и вставить в строку поиска 

''Preferences: Open Keyboard Shortcuts (JSON)''

Не путать с ''Preferences: Open Default Keyboard Shortcuts (JSON)'' — туда можно заглянуть только для того, чтобы увидеть синтаксис вызова того или иного события.

Выбор по [Enter], будет открыт файл ''~/.config/Code/User/keybindings.json''

Комментарии в JSON в принципе отсутствуют, их можно вставить только как строку с префиксом, что означает «это проигнорировать».

''"_comment": "Что угодно; перенос строк не предусмотрен",''

Если какое-то сочетание клавиш уже назначено, то его сперва надо отключить — предварить соответствующую команду дефисом. 

{{{code: id="common_keybinding" lang="json" linenumbers="True"
[
    {
        "_comment": "Выполнить файл main.py",
        "key": "ctrl+1",
        "command": "workbench.action.debug.start"
    },
    {
        "_comment": "Отключить режим дебаггинга по Esc",
        "key": "escape",
        "command": "workbench.action.debug.stop"
    },
    {
        "_comment": "======================= Перемещение строк =============================================",
        "key": "",
    },
    {
        "_comment": "Отключить встроенное перемещение строк вверх по alt+up",
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction"
    },
    {
        "_comment": "Отключить встроенное перемещение строк вниз по alt+down",
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction"
    },
    {
        "_comment": "Назначить перемещение строки под курсором вверх по ctrl+up",
        "key": "ctrl+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus"
    },
    {
        "_comment": "Назначить перемещение строки под курсором вниз по ctrl+up",
        "key": "ctrl+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus"
    },
    {
        "_comment": "======================= Комментирование строк =============================================",
        "key": "",
    },
    {
        "_comment": "Отменить встроенный кейбиндинг ctrl+d",
            "key": "ctrl+d",
            "command": "-editor.action.addSelectionToNextFindMatch"
    },
    {
        "_comment": "Назначить кейбиндинг ctrl+d на добавить/убрать комментарий — Edit > Toggle Line Comment",
        "key": "ctrl+d",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "_comment": "======================= Переключение фокуса в терминал и обратно ===============================",
        "key": "",
    },
    {
        "_comment": "Отключить стандартный кейбиндинг ctrl+2",
        "key": "ctrl+2",
        "command": "-workbench.action.focusSecondEditorGroup"
    },
    {
        "_comment": "если фокус в редакторе И терминал закрыт → нажатие ctrl+2 откроет терминал и перенесет в него фокус",
        "_comment": "если фокус в редакторе И терминал открыт → просто перенесет фокус в терминал",
        "key": "ctrl+2",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "editorTextFocus"
    },
    {
        "_comment": "если фокус в терминале → нажатие ctrl+2 пенересет фокус в редактор",
        "key": "ctrl+2",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    },
    {
        "_comment": "======================= Группа ===============================",
        "key": "",
    },
]
}}}

===== Свернуть все строки =====

По-умолчанию:

''Ctrl + K, 0'' (ноль)

То есть:

1. нажать ''Ctrl''
2. затем нажать и отпустить ''K'', продолжая удерживать ''Ctrl''
3. нажать ''0''

==== Развернуть все строки ====

''Ctrl + K, J''

==== Cвернуть/развернуть текущий блок ====

По-умолчанию привязано к english-раскладке:

* ''Ctrl + Shift + ['' 
* ''Ctrl + Shift + ]''

Переназначить: сперва посмотреть, не занято ли новое сочетание клавиш чем-то уже полезным, но пока неочевидным. Если нет, открыть меню Keyboard Shortcuts:

* или через меню: File → Preferences → Keyboard Shortcuts
 * или через ''Ctrl + K, S''

В поиске ввести:

* Fold — для сворачивания
* Unfold — для разворачивания

Найти команды:

* Fold (Ctrl+Shift+[) — команда editor.fold
* Unfold (Ctrl+Shift+]) — команда editor.unfold

Нажать на значок карандаша справа от команды, чтобы изменить комбинацию, затем нажать новую комбинацию клавиш.

Если старая комбинация мешает, ее можно удалить кликом по кресту рядом.

===== Настроить перетаскивание строки по Ctrl+Up/Down =====

В VS Code по умолчанию строки кода перемещаются Alt+Up/Down. Я привык к Ctrl+Up/Down.

Открыть палитру команд: Ctrl+Shift+P

''> Preferences: Open Keyboard Shortcuts (JSON)''

Вставить:

{{{code: id="move_lines" lang="json" linenumbers="True"
 [
 	{
        "key": "ctrl+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction"
    }
]
}}}

Команда "''-editor.action.moveLinesUpAction''" отменяет глобальное назначение передвижения строки по alt+Up/Down.

===== Подключить локальный LLM =====

См. [[HowTo:Сделать:Подключить к IDE локальный LLM]]

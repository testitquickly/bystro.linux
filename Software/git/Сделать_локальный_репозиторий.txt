Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-07-29T19:15:29+03:00

====== Сделать репозиторий в каталоге ======

[ @git @folder ]

Обычно репозитории делают на постоянно работающих серверах, чтобы все в команде могли получить все версии рабочих файлов. Иногда надо всего лишь сделать репозиторий на своем ноуте в отдельном каталоге. 

Можно сделать репозиторий из IDE (любой), но 
* IDE пихает в репозиторий все файлы из каталога с проектом, в том числе и все свои служебные файлы, которые в репозитории не нужны.
* в таких локальных репозиториях работает ''commit'', но не работает ''push''. 

Решение есть, и достаточно простое.

===== Сделать bare-репозиторий =====

Такой репозиторий не содержит рабочей копии кода, он нужен только для хранения версий и для git push/pull. Нормальные пацаны про такой тип репозиториев даже не знают.

Сделать отдельный каталог для //всех// «локальных» репозиториев на ноутбуке. Условно назовем его ''~/git_repo/''

''git init --bare ~/git_repo/my_project_name''

Правильный ответ:

''Инициализирован пустой репозиторий Git в /home/astenix/git_repo/my_project_name/''

===== Настроить локальный репозиторий как «удаленный» =====

Перейти в каталог нового репозитория (обязательный шаг):

''cd ~/git_repo/my_project_name''

Настроить этот репозиторий как удалённый:

''git remote add origin ~/git_repo/my_project_name''

===== Сделать рабочий проект в отдельном каталоге =====

Условно все проекты будут постоянно находиться в ''~/workspace/Python/projects'', поэтому:

''mkdir -p ~/workspace/Python/projects/my_project_name''

Оставить каталог пустым.

Название каталога с проектом может быть другим, но в будущем, когда надо будет скачивать проект из сети через git, это аукнется, поэтому лучше привыкнуть к этому подходу сразу.

===== Клонировать репозиторий в каталог с проектом =====

''git clone ~/git_repo/my_project_name ~/workspace/Python/projects/my_project_name''

Ожидаемый ответ:

''warning: Похоже, что вы клонировали пустой репозиторий.''
''готово.''

…и в каталоге с проектом появится подкаталог ''.git/''

Можно то же самое сделать так:

''cd ~/workspace/Python/projects/my_project_name''
''git clone ~/git_repo/my_project_name .''

но в этом случае аккуратно с точкой, она означает «клонировать прямо сюда» и без неё будет ошибка.

===== Положить в локальный репозиторий файлы =====

Можно просто положить в каталог с рабочим проектом какие-то файлы (помним, что в git нельзя заливать пустые каталоги) и закоммитить их в репозиторий:

'''
git add .
git commit -m "initial commit"
git push
'''

Посмотреть историю коммитов:

''git log''

Кратко:

''git log --oneline''

===== Указать IDE источник файлов из «удаленного» репозитория git =====

Большинство современных IDE не будут создавать новые проекты в каталогах, в которых есть какие-то файлы, и это разумно.

Можно «Открыть существующий проект», даже если его еще нет, и всего лишь указать существующий каталог ''my_project_name'', и новый проект будет создан (в каталоге появятся служебные файлы проекта) и, скорее всего, файлы из каталога будут в нём отображаться.

Если проект будет создан в пустом каталоге, то в большинстве IDE при создании нового проекта надо указать его так:

* name: ''my_project_name''
* location: ''~/workspace/Python/projects/''

Обычная ошибка новичков: указывать в location полный путь к каталогу с проектом. Обычно после этого IDE создаёт в указанном каталоге новый подкаталог.

В общем, настало время убедиться в том, что проект распознает уже подключенный «удаленный репозиторий». Согласно настройкам своего IDE, посмотреть ''git history'' — там должен отобразиться ''"initial commit"'' со всеми своими файлами.

===== И еще про bare-репозитории =====

Поскольку изначально был создан bare-репозиторий, подключаться к нему из гит-читалки вроде [[SmartGit]] можно, но незачем, потому что в нём нет файлов, есть только информация о метаданных. Подключаться надо к репозиторию из каталога с рабочим проектом, в нашем случае ''~/workspace/Python/projects/my_project_name'' через ''Repository > Add or Create''

Там можно будет увидеть untracked files вроде служебных файлов IDE — их можно закатать в ''.gitignore''

Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-12-22T04:16:50+02:00

====== Как сделать Python-проект в Sublime ======

[ @sublime @python @shortcuts ]

См. [[Sublime]]

===== Сделать каталог для проекта =====

заодно внутри можно сходу сделать первый файл. Из озорства назовём проект “basics”.

Одной командой:

''mkdir -p basics/ && touch $_/basics.py''

===== Сделать проект =====

В Sublime своё определение «проекта» — это просто список файлов, объединённых какой-то логикой. Они могут, как это обычно бывает, находиться в одном каталоге на hdd, а могут в разных.

На диске проект сублима (можно называть его «саблайм», но мне привычнее воспринимать это слово на румынский манер) выглядит как отдельный файл с расширением “.sublime-project”. Он ценен и тем, что в нём перечислен список файлов, которые относятся к какой-то теме, и тем, что в нём можно для каждого «проекта» указывать //отдельные// настройки, например, прописать путь до интерпретатора Python в virtualenv.

В Sublime:

	* File > Open… > зайти в папку проекта и выбрать нужный файл. Новый файл будет добавлен в общий список уже открытых файлов.
	* File > Open Folder… > выделить папку проекта (не заходя в нее) и кликнуть по ’Open’. Новое окно будет открыто, в Side Bar будет отображаться перечень файлов из выбранного каталога.
	* Project > Save Project As…

===== Настроить проект =====

И если открыть в редакторе этот *.sublime-project, то можно наколотить всякого нужного, например:

'''
{
	"folders":
	[
		{    // следовать по симв. ссылкам
			"follow_symlinks": true, 

			// путь к проекту от текущего файла
		   "path": ".", 
		}
	],
	"settings":
	{
		// точный путь до определенного интерпретатора
		"python_interpreter": "/usr/bin/python3.9",
	}
}
'''

==== Настройка Anaconda ====

В Anaconda встроен довольно строгий линтер, он считает неправильными почти все строки любого кода (и он, конечно, прав), помечая их белыми прямоугольниками. Эту функциональность лучше передать отдельному плагину, бо лучше использовать линтер под свой язык программирования и строго под выбранные юзером правила правописания, которые под тот же Python бывают очень разные. Поэтому

'''
Preferences 
> Package Settings 
> Anaconda 
> Setting — User
'''

Этот файл пуст, можно прописать там и отключение линтера анаконды, и путь к рабочей версии Python:

'''
{
	"settings": {
		"python_interpreter": "/usr/bin/python3",
		"anaconda_linting": false
	}
}
'''

Ctrl+S и перезапустить Sublime. Если изменений не будет, то можно задать ту же настройку на глобальном уровне:

'''
Preferences 
> Package Settings 
> Anaconda 
> Setting — Default
'''

Прописать параметр ’false’ для "''anaconda_linting''". 

Ctrl+S и (опционально) перезапустить Sublime. 

Позже можно будет использовать возможности Anaconda для автоформатирования кода по CTRL-ALT-R (насколько это, конечно, применимо к тому же питону) в соответствии с правилами PEP8. Там тоже надо настраивать точнее, бо по-умолчанию эта шняга заменяет табы четырьмя пробелами.

Быстрое решение:

'''
View 
> Indentation 
> Tab Width: 4 //эту настройку в будущем уже не трогаем
'''

'''
View 
> Indentation 
> Convert Indentations to Tabs
'''

Или же:

	В правом нижнем углу окна отображается эта же настройка ‘Tab Size: 4’.

	Левомышечный клик по ней открывает то же самое меню, что из View. Остаётся кликнуть по последней команде: Convert Indentations to Tabs. Можно использовать каждый раз после CTRL-ALT-R.

Надо пореже использовать CTRL-ALT-R и воспитывать в пальцах изначально принудительное правописание и отступы, в Python этот аспект важнее, чем в других ЯП.

И да, я за табы.

===== Настройка консоли =====

По-умолчанию дежурный запуск скриптов на Python делается во встроенной консольке через Ctrl+B. Годно, если надо просто что-то выполнить, и нет, если подразумевается интерактивность со стороны юзера.

'''
Ctrl+Shift+P 
> Package Control: Install Package 
> Terminus
'''

Затем сохранить в каталог с пакетами ( ''~/.config/sublime-text/Packages/User/'' ) новый файл „close_terminal.py‘ — https://gist.github.com/OdatNurd/2aeb8f753a053d9b927a8f125a8e456d — это плагин для тонкой обработки будущих окон терминала. В частности, он будет при каждом билде скрипта в разработке держать фокус на окне со скриптом и фокус только на одном окне терминала, чтобы не открывалось новое при каждом нажатии Ctrl+B.

'''
Tools 
> Build System 
> New Build System
'''
 
Откроется пустой файл настроек.

'''
{
	"target": "terminus_open",
	"auto_close": false,
	"title": "Output",
	"cancel": "terminus_cancel_build",
	"pre_window_hooks":
		[
			["windows_focus", {"store": true}],
			["close_terminus_view_by_title", {"title": "Output"}],
			["windows_focus", {"store": false}],
		],
	"post_window_hooks":
		[
			["carry_file_to_pane", {"direction": "right"}],
			["windows_focus", {"store": false}],
		],
	"shell_cmd": "/usr/bin/python3 -u \"$file\"",
	"file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)",
	"selector": "source.python",
	"env": {"PYTHONIOENCODING": "utf-8"},
	"variants":
	[
		{
			"name": "Syntax Check",
			"shell_cmd": "/usr/bin/python3 -m py_compile \"${file}\"",
		}
	]
}
'''

	//Путь ''/usr/bin/python3'' общий. Можно задать любое направление к другим версиям Python, буде таковая необходимость соизволит явиться.//

	Под виндой, соответственно, в shell_cmd надо указать путь к python.exe, и делать это надо чуть заковыристо, через двойные косые: «shell_cmd»:
	
	//''D:\\.python_venvs\\general_python\\Scripts\\python.exe -u \"$file\"''//

Ctrl+S > дать новому файлу sublime-build имя вроде ’BuildPython.sublime-build’ и дважды убедиться в том, что он сохраняется в ''/~/.config/sublime-text/Packages/User/''

'''
Tools 
> Build System 
> выбрать ’BuildPython‘
'''

Больше эту настройку можно не трогать. Теперь общий хоткей Ctrl+B вызовет консоль Terminus справа от окна с кодом и в ней выполнит код по заветам прописанного интерпретатора Python.

Перевод фокуса с одной панели на другую с клавиатуры через Ctrl+1 и Ctrl+2 — если на экране две панели (их можно понаоткрывать бесчетно). 

См. [[Python]]

Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2024-12-03T22:55:01+02:00

====== DaVinci Resolve ======

[ @davinciresolve @video ]

===== Установить =====

* [[Debian:Install:DaVinci Resolve]]
* [[Manjaro:Install:DaVinci Resolve]]

===== Теория свободных кодеков =====

Дальше придётся повозиться и принять несколько решений с далеко идущими последствиями.

По-умолчанию в Linux для работы с видео представлены только свободные библиотеки с открытым исходным кодом. И DaVinci Resolve по-умолчанию следует этим ограничениям — работает только с видео в формате ''AV1'' (открытый стандарт сжатия видео) и только с аудио в формате ''wav'' (''pcm''). То есть, в него можно затянуть видео в любом формате, но проигрываться оно не будет, особенно если это ''mp4'' с аудио ''aac''. Выглядит странно, но это правильно.

Для работы с видео в Linux по-умолчанию используется набор свободных библиотек „FFmpeg”, который включает в себя ''libavcodec'' (библиотеку кодирования и декодирования аудио и видео) и ''libavformat'' (библиотеку мультиплексирования и демультиплексирования в медиаконтейнер). А кодеков — много, и для видео, и для аудио, и почти все они — проприетарные, в том числе и ''mp4'' с ''aac''. На практике-то ничего не остановит от установки несвободных кодеков без последствий, но если видео пойдёт в коммерческое  использование (подключенная реклама на Youtube), и особенно к распространение или интеграцию в коммерческие продукты, да ещё и к публичной раздаче, то может быть ойблэт. 

Легально можно делать видео в трех форматах 

* AV1 (за ним будущее) 
* VP9 (устаревает, но ещё торт) 
* VP8 (устарел)

и только с двумя форматами аудио

* Opus (за ним будущее)
* Vorbis (устаревает) 

Если надо сделать видео, которое выйдет в паблик, то следует экспортировать его только в связке “AV1 + Opus”. 

Но это решает только задачу публикации готового видео. Чтобы его сперва отредактировать в DaVinci, надо выбрать один из подходов:

==== 1. Стандартный подход ====

Из видеофайла, которое надо отредактировать, следует
* экспортировать аудио в отдельный wav-файл,
* перекодировывать видео через [[+Кодеки DaVinci Resolve:DNxHD]] (для HD) или **DNxHR** (для 4K) — выходной файл будет несжатым, ему будет нужно много свободного места на дисках (и в памяти),
* затянуть оба файла в проект DaVinci.

==== 2. Наглый подход ====

Установить в систему FFmpeg + большое множество несвободных кодеков и надеяться, что они будут подхвачены DaVinci — а это не факт.

==== 3. Особенный подход ====

Сделать собственную сборку FFmpeg с поддержкой большинства популярных (и несвободных) видео и аудиокодеков, включая те, которые требуют проприетарных библиотек. Сделать на неё симлинк в /usr/local/bin и FFmpeg будет перемалывать буквально всё, что ему будет предложено на вход.

Но есть несколько нюансов:
1. установленная таким способом FFmpeg не будет обновляться при стандартной проверке обновлений. Придется заново клонировать репозиторий и по-новому собрать FFmpeg «для себя».
2. не факт, что DaVinci Resolve всегда будет использовать FFmpeg для кодирования или декодирования входящих в проект файлов.
3. всё равно надо будет отдельно следить за форматом ВЫХОДНОГО файла из DaVinci Resolve ввиду повышенной неоднозначности вопросов лицензирования используемых технологий.

В целом лучше использовать «Наглый подход» и всегда предварительно перегонять видеофайлы для DaVinci в промежуточный формат MXF.

===== Какие кодеки использует DaVinci Resolve =====

[[+Кодеки DaVinci Resolve]]

===== Установить FFmpeg =====

См. [[Debian:Install:FFmpeg]]

===== Какой выбрать битрейт =====

Для редактирования видео в формате DNxHD или ProRes — ''185-200'' Mbps. Можно и больше, но компьютер нужен с большим запасом.

Для стриминга — низкий:
* YouTube
	* от ''8'' до ''12'' Mbps, или ''10–25'' Mbps для 1080p
	* ''35–45'' Mbps для 4K
* Twitch
	* ''3-10'' Mbps для потоков в 1080p.

===== Перекодировать входной видеофайл =====

==== Проверить его спецификации ====

''ffprobe "video.mp4"''

Примеры ответа для avi (видео/аудио):

''Stream #0:0: Video: mpeg4 (Advanced Simple Profile) (XVID / 0x44495658), yuv420p, 704x528 [SAR 1:1 DAR 4:3], 1594 kb/s, 29.97 fps, 29.97 tbr, 29.97 tbn''
''Stream #0:1: Audio: ac3 ([0] [0][0] / 0x2000), 48000 Hz, 5.1(side), fltp, 448 kb/s''

или для mkv:

''Stream #0:0(rus): Video: h264 (High), yuv420p(progressive), 1920x804 [SAR 1:1 DAR 160:67], 25 fps, 25 tbr, 1k tbn (default)''
''Stream #0:1(rus): Audio: ac3, 48000 Hz, stereo, fltp, 192 kb/s (default)''

Это всё надо соотносить со спецификацией проекта в DaVinci.

	Разрешение: 1920x1080
	Формат пикселей: yuv422p

==== Собрать команду для перекодировки ====

Учесть, что на выходе будет несжатый видеофайл (большой размер). 

Заранее определить формат выходного файла — MOV или MXF. Разница по размерам между этими форматами несущественная — видеофайл на ''2 Mb'' сжатый кодеком ''H264'' был раскатан в файл mov на ''121 Mb'' и в mxf — на ''116 Mb''. Однако файлы MXF DaVinci воспроизводит сразу, а файлы MOV надо дополнительно снабжать отдельным WAV-файлом, который также надо экспортировать из исходного видеофайла.

Параметры для примера:
* b:v 200M — битрейт.
* pix_fmt yuv422p — цветовая модель
* s 1920x1080 — разрешение (следить за искажениями)
* r 25 — частота кадров (FPS)

''ffmpeg -i "video.mp4" -c:v dnxhd -b:v 200M -pix_fmt yuv422p -s 1920x1080 -r 25 "output_video.mov"''

Есть вероятность, что параметры входного видео будут несовместимы с DNxHD (например, чаще всего — другое разрешение или реже — другая цветовая модель). Тогда его нужно предварительно принудительно преобразовать через промежуточный файл.

''ffmpeg -i "video.mp4" -vf "scale=1920:1080" -pix_fmt yuv422p intermediate_video.mp4 && ffmpeg -i intermediate_video.mp4 -c:v dnxhd -b:v 200M "output_video.mov"''

Не факт, что результат будет адекватным, особенно если входное видео снято на смартфон в «вертикальном» формате (720х1600). Но можно обработать видео таким образом, чтобы оно не растягивалось или не теряло пропорции. 

1. Можно принудительно растянуть видео (с сохранением соотношения сторон) до 1920x1080. Это неизбежно приведёт к искажению:

''ffmpeg -i "video.mp4" -vf "scale=1920:1080" -pix_fmt yuv422p intermediate_video.mp4 && ffmpeg -i intermediate_video.mp4 -c:v dnxhd -b:v 200M "output_video.mov"''

2. Можно растянуть видео (''scale'') и добавить черные полосы (letterboxing) для сохранения соотношения сторон (''pad''):

''ffmpeg -i "video.mp4" -vf "scale=iw*min(1920/iw\,1080/ih):ih*min(1920/iw\,1080/ih),pad=1920:1080:(1920-iw*min(1920/iw\,1080/ih))/2:(1080-ih*min(1920/iw\,1080/ih))/2" -pix_fmt yuv422p10 -c:v dnxhd -b:v 185M -max_muxing_queue_size 1024 "video-2.mov"''

Второй метод предпочтительнее.

Сложности могут возникнуть всегда, в частности, профили DNxHR LB/SQ/HQ могут требовать определённых форматов пикселей, которые могут не совпадают с теми, которые используется в исходном видео. Всё это придётся решать самостоятельно. Пример:

''ffmpeg -i "нейросети 2024.mp4" -vf "scale=iw*min(1920/iw\,1080/ih):ih*min(1920/iw\,1080/ih),pad=1920:1080:(1920-iw*min(1920/iw\,1080/ih))/2:(1080-ih*min(1920/iw\,1080/ih))/2" -pix_fmt yuv422p10 -c:v dnxhd -b:v 185M -max_muxing_queue_size 1024 "нейросети 2024-2.MXF"''

===== Экспорт видео =====

Export video
format = QuickTime
codec = MPEG

Add to render queue…

===== Экспорт аудио =====

DaVinci Resolve на Linux по-умолчанию не поддерживает проприетарные кодеки вроде ''aac'' или ''mp3'' (условно уже свободный с 2017, но не факт), но принимает аудиофайлы в формате ''pcm'' (wav). Если надо импортировать видеофайл с неподдерживаемым аудио — это аудио надо сперва вынести в отдельный файл:

''ffmpeg -i "input_video.mp4" -c:a pcm_s16le "output.wav"''

Без явного указания частоты дискретизации ffmpeg возьмет частоту дискретизации аудио из исходного видеофайла. Можно установить частоту дискретизации вручную:

''ffmpeg -i "input_video.mp4" -c:a pcm_s16le -ar 44100 "output.wav"''

Проверить частоту дискретизации:

''ffmpeg -i "input_video.mp4"''

Пример ответа:

''Stream #0:0[0x1](eng): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 191 kb/s (default)''

Для мелких файлов аудио в ''48 kHz'' будет избыточным, но в целом надо ориентироваться на настройки проекта в DaVinci.

===== Конвертировать аудио внутри видеофайла =====

При экспорте проекта в MP4 или MKV сразу будет предложен видеокодек AV1. Но аудио будет предложено только в формате FLAC (иногда в AAC, что может быть странно). 

Если надо публиковать видео строго с аудио в OPUS — после рендеринга из DaVinci (если он будет успешным) дополнительно следует через ffmpeg конвертировать аудио внутри видеофайла. По-сути, файл будет пересобран.

Пример:

''ffmpeg -i "video.mp4" -c:v copy -c:a opus -b:a 128k "video_opus.mp4"''

В этом примере:

* c:v copy — сохраняет видео без изменений.
* c:a opus — указывает кодек OPUS для аудио.
* b:a 128k — устанавливает битрейт для аудио в 128 kbps (настраивать по вкусу).

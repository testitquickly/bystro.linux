Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-05-13T21:24:12+03:00

====== ssh ======

[ @ssh @console @shortcuts ]

Secure shell (SSH) — наш основной способ коннекта на удалённый компьютер в консоли.

В современных дистрибутивах этот сервис называется „OpenSSH”, и как правило, он установлен и не активен, поэтому всё начинается с проверки его статуса и запуска при необходимости. Но начнём с установки, бо это основа.

===== Важное про ключи ssh =====

Если есть несколько серверов, то можно сделать один ключ и зарегистрировать его на каждом сервере. Удобно и предсказуемо. 

Можно даже раздать один и тот же //приватный// ключ нескольким сотрудникам (или даже всем сразу), и все будут заходить на рабочие сервера с одинаково-предсказуемыми настройками. Когда речь идет только о чтении файлов («смотреть» в одну и ту же БД), то это решение блестяще упрощает жизнь всем сразу. В норме разработчики делятся между собой одним и тем же приватным ключом, особенно в больших корпорациях, где доступы к рабочему окружению можно ждать неделями. Но когда внутренняя сеть будет взломана — особенно если кто-то из «своих» на что-то абидиццо и передаст файл с ключом злому умышленнику…

Также ходить в разные системы с одним и тем же ключом может быть не только очень удобно, но и очень опасно, если за тобой кто-то очень настойчиво следит, например, кто-то из озорства шарит по гитхабу — [[./habr.com-Вас сдаст Гитхаб деанонимизация пользователей SSH-серверов.pdf]] — или злые менты собирают доказательную базу в ходе расследования. Ключ ssh сработает как отпечатки пальцев — прямое и очень весомое доказательство о причастности автора/владельца ключа к чьему-то преступлению. И пусть ты уже уволился и понятия не имеешь, кто пользуется твоим уже древним ssh-ключом, ведь это всего лишь два файла…

В норме для каждого сервера должен быть отдельный ключ. Достаточно закатать команду доступа к каждому в отдельный алиас, и будет удобно.

===== Установить OpenSSH =====

* [[Debian:Install:ssh]]
* [[Manjaro:Install:ssh]]

===== Создать новый ssh-ключ =====

Проверить статус сервиса SSH

''sudo systemctl status ssh.service''

Проверить готовность ssh-agent

''eval `ssh-agent -s`''

Здесь обратные кавычки (`) означают command substitution — т.е. сначала выполнится ssh-agent -s, и его вывод будет подставлен в eval.

Пример ожидаемого ответа: 

''Agent pid 82671''

Выполнить:

''ssh-keygen -t'' __ed25519__ ''-C "user@email"''

* user@email — можно прописать любую белиберду, она позже поможет идентифицировать ~~автора~~ ключ среди множества других
* ed25519 — тип шифрования для нового ключа 

Их несколько: 
	* ''rsa'' — вездесущий. Есть сервера, которые работают только с ключами “rsa” (тот же OMV)
	* __''ed25519''__ — временно лучший — нет известных уязвимостей, быстрый, не требует настройки параметров
	* ''ecdsa'' — надёжный, но сложен в настройке
	* ''ecdsa-sk'' и ''ed25519-sk'' — ключи для аппаратных токенов
	* ''dsa'' — устарел

Каждый подразумевает разные алгоритмы шифрования, и в некоторых случаях тот или иной формат может быть хорошим решением, а в некоторых большой проблемой. “rsa” норм в простейшем контексте, но если сервер принимает “ed25519” — следует предпочесть последнее.

При создании будет запрос „//Enter file in which to save the key//”. По-умолчанию предложен путь ''~/.ssh/'' и название ключа вроде ''id_ed25519'' (это имя файла без расширения). Можно указать вручную любой другой путь, например ''/home/astenix/keys/ssh/your-key'' 

В каталоге “ssh” появятся два файла:

* ''your-key''
* ''your-key.pub''

Первый — собственно ssh-ключ, он же //Personal key//, и его следует хранить в секрете. 

Второй — //Public key//, его можно публиковать в plain text где угодно, он не имеет смысла без своего приватного ключа. 

//Passphrase// — пароль, кагбэ. Можно оставить его пустым (Enter, Enter…), или написать что-то, что не забудется, бо способов восстановления нет. Если что-то написать, то при подключении через этот ключ ВСЕГДА будет происходить запрос «пароля».

В будущем можно поменять место хранения и название (всегда обоих) файлов, после этого их надо будет «с нуля» регистрировать в системе.

=== Проверить созданный ключ ===

Предположим, что новый ключ создан в каталоге ''/home/astenix/keys/ssh/''

1. Вывести в консоль содержимое файла с //публичным// ключом:

''cat /home/astenix/keys/ssh/your-key.pub''

Это читаемый глазами текст с неординарным содержанием.

2. Вывести в консоль содержимое файла с //приватным// ключом (просто из любопытства):

''cat /home/astenix/keys/ssh/your-key''

Содержимое этого файла — машинный код (без исключений).

===== Зайти на удаленный сервер из ноутбука =====

Итак, на моем ноутбуке в каталоге “ssh” появятся два файла:

* ''your-key''
* ''your-key.pub''

1. **Зайти по ssh через пароль на удаленный компьютер** (с Debian, конечно же)

2. **Закинуть на удаленный компьютер свой ''your-key.pub''**

Можно в корень своего профиля, но лучше в отдельный каталог.

3. **Проверить конфигурацию SSH-сервера**

''sudo mcedit /etc/ssh/sshd_config''

Там две строки должны быть раскомментированы:

''PubkeyAuthentication yes''
''AuthorizedKeysFile .ssh/authorized_keys''

Если эти строки закомментированы (так по-умолчанию) — раскомментировать их. Если отсутствуют — добавить их. 

Путь к файлу ''.ssh/authorized_keys'' должен быть указан именно так, без тильды, потому что демон SSH интерпретирует путь относительно домашнего каталога пользователя по умолчанию. То есть ''.ssh/authorized_keys'' == ''$HOME/.ssh/authorized_keys''

4. **Перезапустить SSH-сервер на удаленном сервере**

''sudo systemctl restart sshd''

5. **На удалённом сервере добавить принесенный ключ в список авторизированных ключей**

В этом примере ssh-ключ находятся в каталоге ''/home/server/keys-ssh''

**6. На удалённом сервере прописать правильные права каталогам и файлам ssh**

ssh очень требователен к настройкам доступа. Надо последовательно и по-отдельности прописать права каждому каталогу по пути к файлу с ключом ssh, в котором находится pub-файл. Например, ключи находятся в ''/home/mySettings/keys/ssh'':

''su''

''chown user:sudo /home/mySettings; chmod 700 /home/mySettings; chmod 700 /home/mySettings/keys; chmod 700 /home/mySettings/keys/ssh; chmod 600 /home/server/.ssh/authorized_keys''

Перейти в каталог с принесенным ключем и добавить его в список авторизированных ключей:

''cat'' __''your-key''__''.pub >> ~/.ssh/authorized_keys''

Файл ''~/.ssh/authorized_keys'' — просто текстовый файл, его можно редактировать руками, удалить оттуда всё и заново туда что-то записать. По-умолчанию его может не быть, тогда его надо создать (''mcedit ~/.ssh/authorized_keys'').

7. **Разорвать ssh-сессию с удаленным компьютером**

И закрыть активное окно Konsole. Или открыть новое…

8. **Зайти на удаленный сервер с ноутбука**

Использовать вход по ssh с указанием полного пути к задействованному приватному ключу:

''ssh astenix@192.168.10.1 -i cat /home/astenix/keys/ssh/your-key''

Если всё хорошо, закатать эту команду в алиас в ''~/.bashrc'' и впредь логин будет происходить по удобно-короткому алиасу.

Также постоянными подключениями по ssh можно управлять через файл ''~/.ssh/config'', в котором каждое подключение надо зарегистрировать в виде 

{{{code: id="ssh-config" lang="sh" linenumbers="True"
Host server-abc 
	HostName 192.168.10.20
	User astenix
	IdentityFile ~/.ssh/server-abc
}}}

Мне проще использовать алиасы в едином месте.

==== Если подключение не работает ====

…или нет автоматического логина, или удаленный сервер требует пароль, вероятно, поможет перезапуск сервиса ssh на обоих компьютерах:

''sudo systemctl restart sshd''

Если нет — посмотреть лог подключений. В отдельном окне подключиться к удаленному серверу и запустить отслеживание

''sudo journalctl -f -u ssh''

В другом окне инициировать подключение с ключом ssh. Если в логе будет строка вроде 

''Authentication refused: bad ownership or modes for directory /home/astenix''

значит, при прописывании настроек доступа к каталогам и файлам на сервере что-то пошло не так. Перепроверить, перезагрузить.

==== Подавить дежурное приветствие ====

При каждом подключении выводится что-то вроде 

{{{code: lang="texinfo" linenumbers="True"
The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Thu Mar 20 06:17:52 2025 from 192.168.50.18
}}}

Как это убрать

**1) На удалённом компьютере отредактировать**

''sudo mcedit /etc/pam.d/sshd''

Найти строки

''# Print the message of the day upon successful login.''
''# This includes a dynamically generated part from /run/motd.dynamic''
''# and a static (admin-editable) part from /etc/motd.''
''session    optional     pam_motd.so  motd=/run/motd.dynamic''
''session    optional     pam_motd.so noupdate''

Закомментировать последние две.

**2) То же самое найти и закомментировать в файле**

''sudo mcedit /etc/pam.d/login''

Также в файле ''login'' закомментировать строку

''# Prints the last login info upon successful login''
''# (Replaces the `LASTLOG_ENAB' option from login.defs)''
''session    optional   pam_lastlog.so''

**3) В файле** 

''sudo mcedit /etc/ssh/sshd_config'' 

найти строку

''#PrintLastLog yes''

и поменять её на 

''PrintLastLog no''

**4) Перезапустить SSH демон**

''sudo systemctl restart sshd''

===== Зайти на ноутбук из удаленного сервера =====

В принципе, можно использовать уже существующую пару ''your-key'', достаточно только перекинуть на сервер //приватный// ключ и прописать на нотубуке ''cat'' __''your-key''__''.pub >> ~/.ssh/authorized_keys''

Затем на ноутбуке выполнить последовательно всю процедуру с прописыванием прав всем каталогам по пути к файлам с ключами.

В офисном окружении есть резон создать себе новый ключ ssh на сервере, и действовать через него.

===== Добавить ssh-ключ в систему =====

Я не пользуюсь этим методом, потому что надежнее указать нужный ключ (и вообще настроить все параметры) в строке подключения через алиас в .bashrc, но он есть и считается основным.

Можно добавить приватный ssh-ключ в ssh-агент — фоновый процесс, который хранит в памяти один или несколько приватных ключей. После этого не придется указывать полный путь к ключу при каждом подключении. Да и вообще когда есть много ключей, и надо ими централизованно управлять и автоматически распознавать…

По-умолчанию

* каталог для всех ssh-ключей — „''~/.ssh”'' 
* файл с новым ssh-ключом называется „id_rsa”. 

Все ключи надо прописать в системе — эта операция называется «импорт».

==== Импортировать новый ssh-ключ ====

По-настоящему эта операция называется «регистрация нового ключа в ssh-agent».

Импортируют всегда __personal key__.

Тут подразумеваем, что ключ был создан с настройками по-умолчанию — в файл ''∼/.ssh/id_rsa''

И ещё тут подразумевают, что уже запущен ssh-agent. Если нет — см. выше как его включить.

=== Установить файлу с приватным ключом права «только на чтение» ===

Иначе в импорте ключа будет отказано с причиной «//Permissions are too open//». Иногда это надо делать после переименования каталога с ключом или после переноса профиля.

Для каталога с ssh-ключами тоже устанавливаются особые права.

''chmod 700 ~/.ssh; chmod 600 ∼/.ssh/id_rsa''

=== Зарегистрировать новый ssh-ключ в системе ===
 
Мне это не нужно, потому что при подключениях можно напрямую указывать нужный ключ, прописывая полный путь к нему. Но если надо:

''ssh-add ∼/.ssh/id_rsa''

Указать Passphrase ключа, если таковой был задействован.

Ожидаемый ответ: 

''Identity added [путь к добавленному ключу] (емайл_ключа)''

Если ответом будет “//Could not open a connection to your authentication agent//”, следует принудительно перейти в режим работы с ssh в отдельном процессе (новое окно с консолью):

''ssh-agent /bin/sh'' 

И уже в этом shell выполнить импорт приватного ключа в систему:

''ssh-add ∼/.ssh/id_rsa''

Done.

Теперь можно добавлять Public key из этой связки для аутентификации на другие ресурсы, например, на GitHub:
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account

=== Проверить импорт ключа ===

Возможно, потребуется сперва перейти в режим работы с ssh в отдельном процессе:

''ssh-agent /bin/sh'' 

Выход из него через ''Ctrl+D''

Запросить список зарегистрированных в системе ключей в кратком формате (его всегда достаточно):

'''
ssh-add -l
'''

Пример ответа: 

''«3072 SHA256:YyaZeTckxJHbwiuew98098yeikgjw7f/Sbdw+LJFejbfke user_email (RSA)»''

то же самое в расширенном формате

''ssh-add -L''

Если ssh-ключей в системе нет, ответ будет «//The agent has no identities//».

===== Удалить ssh-ключ из системы =====

Убедиться в том, что ssh-agent запущен

''ssh -V''

Пример ответа: 

''OpenSSH_9.2p1 Debian-2+deb12u1, OpenSSL 3.0.11 19 Sep 2023''

''ps -auxc | grep ssh-agent''

Пример положительного ответа:

''astenix     1053  0.0  0.0   7664  1860 ?        Ss   03:04   0:00 ssh-agent''

Если ответ отрицательный, то агент запускается так:

''eval $(ssh-agent)''

==== Проверить зарегистрированные в системе ключи ====

''ssh-add -l''

Если нужно нет, то и удалять нечего.

==== Удалить определенный ключ ====

Указать полный путь к public key, который надо удалить (импортируются и удаляются всегда публичные ключи):

''ssh-add -d /полныйПутьДоКаталогаСКлючами/полноеНазваниеФайлаСКлючом.pub''

==== Удалить все ключи ====

Если злой:

''ssh-add -D''

===== Проблема с XTERM =====

При подключении по ssh на удаленном компьютере будет запущена отдельная сессия со своей оболочкой входа (login shell). Это может быть bash, zsh, fish или даже sh — зависит от того, что указано в файле ''/etc/passwd'' для пользователя на компьютеру, к которому происходит подключение.

Например, на компьютере ''abc'' есть юзер ''astenix'':

''user:astenix:1000:1000:User,,,:/home/user:/bin/bash''

При подключении по ssh к компьютеру ''abc'' под юзером ''astenix'' в ходе ssh-сессии будет поднята оболочка ''bash''. А это значит, что будут доступны все инструкции из файла ''.bashrc'' в его профиле. И можно, например, запустить [[Midnight Commander]] с цветами и настройками из его профиля.

Но надо значть неочевидные нюансы. Техническую информацию о том, какие возможности есть у текущего терминала (сколько цветов он поддерживает, как двигать курсор, как очищать экран и т.д.) система передает/получает через системную переменную окружения $TERM. А за $TERM стоит $XTERM — терминальный эмулятор, через который все современные терминалы (корректно говорить «эмуляторы консоли» вроде xterm, gnome-terminal, konsole, alacritty) эмулируют поведение древних физических терминалов вроде Digital Equipment Corporation (DEC) из 1983-го года, через которые древние программисты взаимодействовали с древними компьютерами.

То есть, глубоко внутри Unix кое-что не знает о том, что мир уже изменился, и продолжает работать «как прежде». Отсюда проистекает легендарная устойчивость и стабильность Unix.

У $TERM есть несколько параметров, которые определяют возможности программ, которые работают «в консоли». Как это проверить:

''echo $TERM''

Если в ответ приходит “''xterm-256color''” — нашему MC доступна полноценная палитра в 256 цветов. Если “''linux''” — то нет, только 16 цветов. Описания всех возможных режимов хранятся в каталогах ''/usr/share/terminfo/'' — там есть всё, даже отмершие Zenith или NEC.

Конец теории.

По умолчанию SSH-клиент передаёт переменную TERM с локальной машины на сервер. То есть если на моей стороне локально уже стоит ''TERM=xterm-256color'', то в консоли после подключения я должен получишь то же самое со стороны удаленной машины. Однако это не всегда работает. Есть //очень// много шансов, что даже если при подключении по ssh к какой-нибудь удаленной машине будет загружена оболочка bash, это будет не полноценный 256color, а какой-то усеченный вариант. Причин тому может быть множество, от особенностей CPU до особенностей расположения планет в космосе — я хз о первопричинах, но наблюдал это неоднократно на разных компьютерах.

И дело даже не в том, что MC загрузится только в базовой расцветке, но ещё и его горячие клавиши вроде F4, F5 и F6 будут переназначены, и пользоваться файл-коммандером станет невозможно… А ещё консольные команды могут выполняться с большой задержкой.

==== Глобальное решение ====

1
Проверить в  ''/etc/passwd'' на удаленной машине, что для пользователя, под которым происходит логин, установлен именно ''bash''

''user:astenix:1000:1000:User,,,:/home/user:/bin/bash''

2
В настройках сервера ssh на удаленной машине — ''mcedit /etc/ssh/sshd_config'' — добавить

'''
AcceptEnv TERM
PermitUserEnvironment yes
'''

Сохранить, перезапустить

''sudo systemctl restart sshd''

3
На удаленной машине добавить команду ''export TERM=xterm-256color'' в начало файла ~/.bashrc

4
Открыть новое подключение по ssh к удаленной машине, выполнить 

''echo $TERM''

В ответ ожидаем “''xterm-256color''”. 

Но не факт. Если ответ всё ещё приходит “''linux''”, остается только параметризировать подключение.

==== Ручное решение ====

У меня каждое подключение по ssh прописано алиасами в ~./bashrc 

''alias bequiet='ssh -t astenix@192.168.50.16 -i /home/mySettings/keys/ssh/astenix "export TERM=xterm-256color; exec bash"'''

Последний параметр буквально включает то окружение ''bash'', которое видит юзер на удаленном компьютере.

Всё.

Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-05-13T21:24:12+03:00

====== ssh ======

[ @ssh @console ]

Secure shell (SSH) — наш основной способ коннекта на удалённый компьютер в консоли. 

В современных дистрибутивах этот сервис называется „OpenSSH”, и как правило, он установлен и не активен, поэтому всё начинается с проверки его статуса и запуска при необходимости. Но начнём с установки, бо это основа.

===== Установить OpenSSH =====

* [[Debian:Install:ssh]]
* [[Manjaro:Install:ssh]]

===== Проверить статус сервиса SSH =====

''sudo systemctl status ssh.service''

==== Проверить готовность ssh-agent ====

''eval `ssh-agent -s`''

Пример ожидаемого ответа: 

''Agent pid 82671''

===== Создать новый ssh-ключ =====

Выполнить:

''ssh-keygen -t'' __ed25519__ ''-C "user@email"''

Но сперва надо понять, какие настройки будут прописаны.

* user@email — почта владельца ключа
* ed25519 — тип шифрования для нового ключа 

Вообще их несколько: 
	* ''rsa'' — вездесущий, есть сервера, которые работают только с ключами “rsa”
	* __''ed25519''__ — временно лучший — нет известных уязвимостей, быстрый, не требует настройки параметров
	* ''ecdsa'' — надёжный, но сложен в настройке
	* ''ecdsa-sk'' и ''ed25519-sk'' — ключи для аппаратных токенов
	* ''dsa'' — устарел

Каждый подразумевает разные алгоритмы шифрования, и в некоторых случаях тот или иной формат может быть хорошим решением, а в некоторых большой проблемой. По-умолчанию выбираем „rsa”, затем смотрим, какие ключи поддерживает принимающая сторона.

Емайл при создании нового ключа обязателен, и в будущем по нему можно будет идентифицировать ключ среди множества других. Можно использовать белиберду, но лучше указать реальный адрес.

При создании будет запрос „//Enter file in which to save the key//”. По-умолчанию предложен путь  ~/.ssh/ и название вроде id_ed25519. Можно использовать любой другой путь, например ''/home/sshKeys/you-key-name'' 

В итоге по выбранному пути появятся два файла:
* you-key-name
* you-key-name.pub

Первый — собственно ssh-ключ, он же //Personal key//, и его следует хранить в секрете. 

Второй — //Public key//, его можно хоть на сайте опубликовать в plain text. 

//Passphrase// — пароль, кагбэ. Или оставить его пустым, или написать что-то, что не забудется, бо способов восстановления нет. Если что-то написать, то при подключении через этот ключ ВСЕГДА будет происходить запрос «пароля».

Можно поменять место хранения и название обоих файлов, но после этого их надо «с нуля» зарегистрировать в системе.

=== Проверить созданный ключ ===

Для простоты предположим, что новый ключ создан с настройками по-умолчанию в файлы „''∼/.ssh/id_rsa''“.

1. Вывести в консоль содержимое файла с публичным ключом:

''cat ∼/.ssh/id_rsa.pub''

Обычно это читаемый глазами текст, но бывают исключения.

2. Вывести в консоль содержимое файла с личным ключом:

''cat ∼/.ssh/id_rsa''

Содержимое этого файла — машинный код (без исключений).

===== Добавить ssh-ключ в систему =====

По-умолчанию 
* каталог для всех ключей — „''~/.ssh”'' 
* файл с новым ssh-ключом называется „id_rsa”. 

Однако это не обязательно. Файлы с ssh-ключами можно называть как угодно и положить куда угодно, например, в „''/home/ssh_keys/nas/''”''.'' 

Важно только прописать их в системе — эта операция называется «импорт».

==== Импортировать новый ssh-ключ ====

По-настоящему эта операция называется «регистрация нового ключа в ssh-agent».

Импортируют всегда __personal key__.

Тут подразумеваем, что ключ был создан с настройками по-умолчанию — в файл ''∼/.ssh/id_rsa''

И ещё тут подразумевает, что уже запущен ssh-agent. Если нет — см. выше как его включить.

=== Установить файлу с приватным ключом права «только на чтение» ===

Иначе в импорте ключа будет отказано с причиной «//Permissions are too open//». Иногда это надо делать после переименования каталога с ключом или после переноса профиля.

Для каталога с ssh-ключами тоже устанавливаются особые права.

''chmod 700 ~/.ssh; chmod 600 ∼/.ssh/id_rsa''

=== Выполнить регистрацию нового ssh-ключа ===
 
''ssh-add ∼/.ssh/id_rsa''

Можно указать полный путь к personal key, а можно сперва зайти в каталог с ним.

Указать Passphrase ключа, если таковой был задействован.

Ожидаемый ответ: 

''Identity added [путь к добавленному ключу] (емайл_ключа)''

Если ответом будет “//Could not open a connection to your authentication agent//”, следует принудительно перейти в режим работы с ssh в отдельном процессе (новое окно с консолью):

''ssh-agent /bin/sh'' 

И уже в этом shell выполнить импорт приватного ключа в систему:

''ssh-add ∼/.ssh/id_rsa''

Done.

Теперь можно добавлять Public key из этой связки для аутентификации на другие ресурсы, например, на GitHub:
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account

=== Проверить импорт ключа ===

Шаг необязательный, но иногда нужный. 

Возможно, потребуется сперва перейти в режим работы с ssh в отдельном процессе:

''ssh-agent /bin/sh'' 

Запросить список зарегистрированных в системе ключей в кратком формате (его всегда достаточно):

'''
ssh-add -l
'''

Пример ответа: 

''«3072 SHA256:YyaZeTckxJHbwiuew98098yeikgjw7f/Sbdw+LJFejbfke user_email (RSA)»''

то же самое в расширенном формате

''ssh-add -L''

Если ssh-ключей в системе нет, ответ будет «//The agent has no identities//».

===== Настроить соединение с удаленным сервером через ssh-ключ =====

Итак, на моем ноутбуке создан новый ssh-ключ ''you-key-name'', он уже прописан в системе, и у меня есть два файла:
* you-key-name
* you-key-name.pub

1. Зайти по ssh (с паролем) на удаленный компьютер с Debian
2. Закинуть на удаленный компьютер мой файл ''you-key-name.pub'' — неважно куда, просто в корень своего профиля.
3. Проверить конфигурацию SSH-сервера:

''sudo mcedit /etc/ssh/sshd_config''

Там две строки должны быть раскомментированы:

''PubkeyAuthentication yes''
''AuthorizedKeysFile .ssh/authorized_keys''

Если эти строки отсутствуют — добавить их; если они закомментированы (так по-умолчанию) — раскомментировать их.
4. Перезапустить SSH-сервер:

''sudo systemctl restart sshd''

==== Импортировать ключ в систему на удалённом сервере ====

По-умолчанию все ключи ssh должны быть добавлены в ~/.ssh/authorized_keys

''cat ~/you-key-name.pub >> ~/.ssh/authorized_keys''

''chmod 700 ~/.ssh; chmod 600 ~/.ssh/authorized_keys''

Разорвать ssh-сессию с удаленным компьютером.

На своём ноутбуке открыть новую консоль и зайти на удаленный компьютер:

''ssh -i ~/.ssh/you-key-name user@serverIP''

Если подключение не работает, вероятно, поможет перезапуск сервиса ssh:

''sudo systemctl restart sshd''

На своём ноуте добавил короткий алиас, например, „udaleator”:

''alias udaleator='ssh user@serverIP -i /полный/путь/к-своему-personal-key/you-key-name'''

И принудительно перечитать файл

''source ~/.bashrc''

Теперь заход на удалённый сервер будет происходить по команде

''udaleator''

Если нужно организовать подключение по ssh с удаленного компьютера к моему ноутбуку, надо 
1. на удаленном компьютере создать ЕГО ssh-ключ, 
2. зарегистрировать его в системе (на удаленном компьютере),
3. притащить на свой ноутбук ключ *.pub с удаленного компьютера, 
4. проверить конфигурацию ssh-сервера на своём ноутбуке
5. последовательно выполнить на своём ноутбуке импорт публичного ключа с удалённого

==== Подавить дежурное приветствие ====

При каждом подключении выводится что-то вроде 

''The programs included with the Debian GNU/Linux system are free software;''
''the exact distribution terms for each program are described in the''
''individual files in /usr/share/doc/*/copyright.''

''Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent''
''permitted by applicable law.''
''Last login: Thu Mar 20 06:17:52 2025 from 192.168.50.18''

Как это убрать — на удалённом компьютере отредактировать несколько файлов.

1)

''sudo mcedit /etc/pam.d/sshd''

Найти строки

''# Print the message of the day upon successful login.''
''# This includes a dynamically generated part from /run/motd.dynamic''
''# and a static (admin-editable) part from /etc/motd.''
''session    optional     pam_motd.so  motd=/run/motd.dynamic''
''session    optional     pam_motd.so noupdate''

Закомментировать последние две.

2)

То же самое найти и закомментировать в файле

''sudo mcedit /etc/pam.d/login''

Также в файле ''login'' закомментировать строку

''# Prints the last login info upon successful login''
''# (Replaces the `LASTLOG_ENAB' option from login.defs)''
''session    optional   pam_lastlog.so''

3)

В файле 

''sudo mcedit /etc/ssh/sshd_config'' 

найти строку

''#PrintLastLog yes''

и поменять её на 

''PrintLastLog no''

4)

Перезапустить SSH демон

''sudo systemctl restart sshd''

===== Удаление ssh-ключей из системы =====

==== Убедиться в том, что ssh-agent запущен ====

''ssh -V''

Пример ответа: 

''OpenSSH_9.2p1 Debian-2+deb12u1, OpenSSL 3.0.11 19 Sep 2023''

''ps -auxc | grep ssh-agent''

Пример положительного ответа:

''astenix     1053  0.0  0.0   7664  1860 ?        Ss   03:04   0:00 ssh-agent''

Если ответ отрицательный, то агент запускается так:

''eval $(ssh-agent)''

==== Проверить зарегистрированные в системе ключи ====

''ssh-add -l''

Если нужно нет, то и удалять нечего.

===== Удалить определенный ключ =====

Указать полный путь к public key, который надо удалить (импортируются и удаляются всегда публичные ключи):

''ssh-add -d /полныйПутьДоКаталогаСКлючами/полноеНазваниеФайлаСКлючом.pub''

==== Удалить все ключи ====

Если злой и неосторожный:

''ssh-add -D''


Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-09-04T02:32:51+03:00

====== Подключить LLM к IDE ======

[ @ide @llm ]

Это легко, но сперва надо основательно кое-что понять:

* IDE может быть любое, хоть “VS Codе”, хоть его оригинальный аналог [[VSCodium]] — принцип подключения LLM для всех один.

* к IDE подключают конкретные LLM (large language model), а не абстрактный Искуственный Интеллект. После работы с LLM как-то перестаёшь вообще говорить «ИИ».

* для повышения эффективности к IDE надо подключить сразу несколько LLM и переключаться между ними — одна модель сильнее в кодогенеративных предсказаниях (code completition), другая — в анализе кода (rationament), третья тупит чуть меньше, чем четвертая. 

* уже есть много моделей, которые можно запускать через локальный сервер на своём ноуте или на отдельном компьютере в локальной сети, что приносит приватность, бесплатность, постоянную доступность, сохранение широкого контекста и гибкость настроек.

* в открытый доступ всегда выводят устаревающие экспериментальные проекты, а не «бесплатные копии действующего ИИ», поэтому локальные LLM всегда проигрывают «облачным сервисам» по качеству результатов работы. Но иногда эта разница незаметна — задачи у всех разные, а инструмент надо выбирать под задачу.

* «локальным» LLM нужно МНОГО вычислительных ресурсов. Условно нормальный «офисный» ноутбук вытянет только небольшие модели, на компьютере с сильной GPU нейросеть заработает пошустрее, но и только — «быстрее» не означает «быстро», там ещё и CPU начнет поджариваться. 

* логично запускать LLM на отдельном компьютере с балансировкой нагрузки, а лучше — на кластере мощных компьютеров. Нейросетям, которые «посильнее в рассуждениях» и больше подходят для работы, нужны ресурсы большого сервера.

* для ускорения можно взять «лёгкую» моделью, но все «лёгкие» модели, кхм, слабоваты в возможностях. В итоге ускорение получается незначительным. 
 
А ещё в IDE локальная LLM //всегда// работает медленнее облачной, потому что в IDE есть **слой посредников**. В консоли всё работает через сервер ollama → выбранную модель → вывод в консоль. А в плагине Continue: VS Code → расширение → JSON-RPC → Continue сервер → запрос в Ollama → обратно в IDE. Каждый слой добавляет задержку, и когда CPU ноутбука занят LLM, эти задержки становятся мучительными. А ещё Continue иногда прогоняет ответ через обработчики, например, проверяет JSON, добавляет подсказки, вставляет в правильное место. 

Итого: 

* для работы нужны облачные LLM — или платные, или бесплатные, но или «слабые», или сделать себе сразу много бесплатных аккаунтов и переключаться между ними по мере исчерпания лимита токенов. Проще платные.
* подключить локальную LLM к IDE надо хотя бы для того, чтобы посмотреть, как это работает и помечтать о том, как наступит вселенная StarTrek и компьютеры начнут работать нормально, чтобы было время подумать о том, как построить адекватную инфраструктуру для локальной LLM.

===== Погасить встроенные подсказки IDE =====

В IDE работают встроенные подсказки названий сущностей по ходу набора (классы, методы, etc). Они все нужны просто потому, что подсказки от IDE «дешевле», чем постоянные обращения к LLM. 

Их можно временно отключить, чтобы убедиться в том, что подсказки приходят только от LLM. 

''Ctrl+Shift+P'' 
''> Preferences: Open Settings (JSON)''

или напрямую редактировать 

'''
~/.config/VSCodium/User/settings.json
'''

Отключить все встроенные в IDE подсказки языка:

* "editor.parameterHints.enabled": false
* "editor.suggestOnTriggerCharacters": false,
* "editor.suggest.showClasses": false,
* "editor.suggest.showFunctions": false,
* "editor.suggest.showMethods": false,
* "editor.suggest.showProperties": false,
* "editor.suggest.showSnippets": false,
* "editor.suggest.showVariables": false,
* "editor.suggest.showWords": false,
* "editor.quickSuggestions": {
	"comments": false,
	"strings": false,
	"other": true },

"other": true — оставить, это нужно LLM.

Включить всё то, что позволяет LLM из Continue показывать свои подсказки прямо в редакторе:

* "editor.inlineSuggest.enabled": true,
* "continue.showInlineTip": true,
* "continue.enableQuickActions": true,

Пример файла:

{{{code: lang="json" linenumbers="True"
{
	"_comment1": "====================================== Editor",
	"editor.autoClosingBrackets": "beforeWhitespace",
	"editor.autoClosingComments": "beforeWhitespace",
	"editor.autoClosingQuotes": "beforeWhitespace",
	"editor.autoIndentOnPaste": true,
	"editor.detectIndentation": true,
	"editor.fontFamily": "'Ysabeau'",
	"editor.fontSize": 15,
	"editor.formatOnPaste": true,
	"editor.formatOnSave": true,
	"editor.inlineSuggest.enabled": true,
	"editor.insertSpaces": false,
	"editor.minimap.renderCharacters": false,
	"editor.minimap.showSlider": "always",
	"editor.mouseWheelZoom": true,
	"editor.tabSize": 4,
	"files.autoSave": "onFocusChange",
	"git.confirmSync": false,
	"terminal.external.linuxExec": "konsole",
	"terminal.integrated.defaultProfile.linux": "bash",
	"terminal.integrated.fontFamily": "Cascadia Code",
	"terminal.integrated.fontSize": 13,
	"terminal.integrated.fontWeight": "normal",
	"terminal.integrated.lineHeight": 1.1,
	"terminal.external.linuxArgs": [
		"--profile astenix"
	],
	"workbench.editor.enablePreview": false,
	"_comment2": "====================================== IDE code completition",
	"editor.parameterHints.enabled": false,
	"editor.suggestOnTriggerCharacters": false,
	"editor.suggest.showClasses": false,
	"editor.suggest.showFunctions": false,
	"editor.suggest.showMethods": false,
	"editor.suggest.showProperties": false,
	"editor.suggest.showSnippets": false,
	"editor.suggest.showVariables": false,
	"editor.suggest.showWords": false,
	"editor.quickSuggestions": {
		"comments": false,
		"strings": false,
		"other": true
	},
	"_comment3": "====================================== Continue (LLM)",
	"continue.enableConsole": true,
	"continue.enableNextEdit": true,
	"continue.enableQuickActions": true,
	"continue.enableTabAutocomplete": true,
	"continue.showInlineTip": true,
	"_comment4": "====================================== Telemetry",
	"continue.telemetryEnabled": false,
	"telemetry.feedback.enabled": false,
	"_comment5": "====================================== Updates",
	"update.enableWindowsBackgroundUpdates": false,
	"update.mode": "manual",
	"workbench.enableExperiments": false,
	"workbench.settings.enableNaturalLanguageSearch": true,
}
}}}

===== Установить плагин Continue =====

Взять файл в формате ''*.vsix'' на https://open-vsx.org/extension/Continue/continue (кнопка Download справа внизу).

''Extensions'' 
''> …'' 
''> Install from VSIX…'' 
''>'' указать файл

Неочевидно, но при его работе/настройке нас будут настырно приглашать завести аккаунт на https://hub.continue.dev, в котором будут храниться все настройки, а в IDE их можно будет автоматически подключать. Это можно не делать, но временами плагин таки будет хотеть туда залогиниться, и таки да, единое место хранения многое упрощает, все модели в IDE будут управляться через настройки одного плагина…

При установке плагина будет автоматически создан каталог с файлами:

''~/.continue/''

Для чистоты эксперимента можно удалить его содержимое (позже все файлы самостоятельно вернутся).

Отдельно убедиться в том, что в каталоге проекта нет скрытого каталога “''.continue''”. Если есть — удалить.

==== Выбрать режим подсказок ====

Есть два режима:

* NextEdit — модель предсказывает продолжение текста после курсора (linear completion). 
* FIM (Fill-in-the-Middle) — модель вставляет код после курсора. Лучше подходит для моделей, которые обучены на FIM-токенах (codellama, starcoder, qwen-coder).

Оба хороши, просто проявляются по-разному. 

nextedit может быть более быстрым и удобным для тех, кто предпочитает использовать клав

===== Подключить внешнюю LLM =====

[[+cloud LLM]]

[[+self-hosted LLM]]

===== Подключить локальную LLM =====

[[+localhost LLM]]

===== Включить обратно встроенные подсказки IDE =====

{{{code: lang="json" linenumbers="True"
{
	"_comment1": "====================================== Editor",
	"editor.autoClosingBrackets": "beforeWhitespace",
	"editor.autoClosingComments": "beforeWhitespace",
	"editor.autoClosingQuotes": "beforeWhitespace",
	"editor.autoIndentOnPaste": true,
	"editor.detectIndentation": true,
	"editor.fontFamily": "'Ysabeau'",
	"editor.fontSize": 15,
	"editor.formatOnPaste": true,
	"editor.formatOnSave": true,
	"editor.inlineSuggest.enabled": true,
	"editor.insertSpaces": false,
	"editor.minimap.renderCharacters": false,
	"editor.minimap.showSlider": "always",
	"editor.mouseWheelZoom": true,
	"editor.tabSize": 4,
	"files.autoSave": "onFocusChange",
	"git.confirmSync": false,
	"terminal.external.linuxExec": "konsole",
	"terminal.integrated.defaultProfile.linux": "bash",
	"terminal.integrated.fontFamily": "Cascadia Code",
	"terminal.integrated.fontSize": 13,
	"terminal.integrated.fontWeight": "normal",
	"terminal.integrated.lineHeight": 1.1,
	"terminal.external.linuxArgs": [
		"--profile astenix"
	],
	"workbench.editor.enablePreview": false,
	"_comment2": "====================================== IDE code completition",
	"editor.parameterHints.enabled": true,
	"editor.suggestOnTriggerCharacters": true,
	"editor.suggest.showClasses": true,
	"editor.suggest.showFunctions": true,
	"editor.suggest.showMethods": true,
	"editor.suggest.showProperties": true,
	"editor.suggest.showSnippets": true,
	"editor.suggest.showVariables": true,
	"editor.suggest.showWords": true,
	"editor.quickSuggestions": {
		"comments": true,
		"strings": true,
		"other": true
	},
	"_comment3": "====================================== Continue (LLM)",
	"continue.enableConsole": true,
	"continue.enableNextEdit": true,
	"continue.enableQuickActions": true,
	"continue.enableTabAutocomplete": true,
	"continue.showInlineTip": true,
	"_comment4": "====================================== Telemetry",
	"continue.telemetryEnabled": false,
	"telemetry.feedback.enabled": false,
	"_comment5": "====================================== Updates",
	"update.enableWindowsBackgroundUpdates": false,
	"update.mode": "manual",
	"workbench.enableExperiments": false,
	"workbench.settings.enableNaturalLanguageSearch": true,
}
}}}

Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2024-11-18T01:47:16+02:00

====== python ftp ======

надо
* зайти по ftp на удалённый ресурс NAS
* убрать все файлы из каталога NAS/files
* загрузить в пустой каталог NAS/files все файлы из локального каталога /home/user/export
ChatGPT сказал:
ChatGPT

библиотек ftplib для работы с FTP 
и модуль os для управления файлами на локальной системе. 
Убедитесь, что ftplib установлен и NAS поддерживает FTP-доступ.

'''
import ftplib
import os

# Параметры подключения
ftp_server = "ftp.example.com"  # Адрес FTP-сервера NAS
ftp_user = "username"           # Логин для FTP
ftp_password = "password"       # Пароль для FTP
remote_directory = "/files"     # Каталог на NAS для работы
local_directory = "/home/user/export"  # Локальный каталог с файлами для загрузки

def clear_remote_directory(ftp):
	"""Удаляет все файлы в заданном каталоге на FTP-сервере."""
	ftp.cwd(remote_directory)
	files = ftp.nlst()  # Получаем список файлов
	for file in files:
		try:
			ftp.delete(file)  # Удаляем каждый файл
			print(f"Удалён файл: {file}")
		except Exception as e:
			print(f"Ошибка при удалении файла {file}: {e}")

def upload_files(ftp):
	"""Загружает все файлы из локального каталога в удалённый каталог на FTP-сервере."""
	for filename in os.listdir(local_directory):
		local_path = os.path.join(local_directory, filename)
		if os.path.isfile(local_path):  # Проверяем, что это файл
			with open(local_path, 'rb') as file:
				ftp.storbinary(f'STOR {filename}', file)  # Загрузка файла
				print(f"Загружен файл: {filename}")

def main():
	# Подключение к FTP-серверу
	with ftplib.FTP(ftp_server) as ftp:
		ftp.login(ftp_user, ftp_password)
		print(f"Подключение к FTP-серверу {ftp_server} установлено.")
        
		# Очистка удалённого каталога
		clear_remote_directory(ftp)
        
		# Загрузка файлов в удалённый каталог
		upload_files(ftp)

	print("Все файлы успешно загружены.")

if name == "main":
	main()
'''

Описание работы скрипта:

	Подключение к FTP: Скрипт подключается к указанному FTP-серверу и аутентифицируется с использованием заданных учетных данных.
	Удаление файлов: Функция clear_remote_directory удаляет все файлы в удалённом каталоге /files.
	Загрузка файлов: Функция upload_files загружает все файлы из локального каталога /home/user/export в удалённый каталог /files.

Перед запуском этого скрипта замените ftp_server, ftp_user, ftp_password, remote_directory и local_directory на соответствующие значения.

===== вынести функцию upload_files в отдельный файл =====

можно создать новый файл, например, ftp_upload.py, и импортировать эту функцию в основной скрипт. Вот как это можно сделать:
Шаг 1: Создайте файл ftp_upload.py

В новом файле ftp_upload.py определите функцию upload_files:

''# ftp_upload.py''
''import os''

''def upload_files(ftp, local_directory):''
	''"""Загружает все файлы из локального каталога в удалённый каталог на FTP-сервере."""''
	''for filename in os.listdir(local_directory):''
		''local_path = os.path.join(local_directory, filename)''
		''if os.path.isfile(local_path):  # Проверяем, что это файл''
			''with open(local_path, 'rb') as file:''
				''ftp.storbinary(f'STOR {filename}', file)  # Загрузка файла''
				''print(f"Загружен файл: {filename}")''

Шаг 2: Обновите основной скрипт

В основном скрипте импортируйте функцию upload_files и передавайте в неё подключение к FTP и путь к локальному каталогу:

''import ftplib''
''from ftp_upload import upload_files  # Импортируем функцию из ftp_upload.py''

''# Параметры подключения''
''ftp_server = "ftp.example.com"''
''ftp_user = "username"''
''ftp_password = "password"''
''remote_directory = "/files"''
''local_directory = "/home/user/export"''

''def clear_remote_directory(ftp):''
	''"""Удаляет все файлы в заданном каталоге на FTP-сервере."""''
	''ftp.cwd(remote_directory)''
	''files = ftp.nlst()  # Получаем список файлов''
	''for file in files:''
		''try:''
			''ftp.delete(file)  # Удаляем каждый файл''
			''print(f"Удалён файл: {file}")''
		''except Exception as e:''
			''print(f"Ошибка при удалении файла {file}: {e}")''

''def main():''
	''# Подключение к FTP-серверу''
	''with ftplib.FTP(ftp_server) as ftp:''
		''ftp.login(ftp_user, ftp_password)''
		''print(f"Подключение к FTP-серверу {ftp_server} установлено.")''
        
		''# Очистка удалённого каталога''
		''clear_remote_directory(ftp)''
        
		''# Загрузка файлов в удалённый каталог''
		''upload_files(ftp, local_directory)''

	''print("Все файлы успешно загружены.")''

''if'' __''name''__ ''== "''__''main''__''":''
	''main()''

Теперь основная программа импортирует upload_files из файла ftp_upload.py, и вы можете использовать функцию отдельно для загрузки файлов на FTP-сервер.

Основное преимущество использования функции main() с вызовом if __name__ == "__main__": в Python заключается в улучшении структуры и расширяемости кода. Вот ключевые преимущества этого подхода:

	Управление точкой входа: Конструкция if __name__ == "__main__": делает скрипт модульным. Если вы захотите импортировать функции из этого скрипта в другой модуль, то код, который находится в main(), не будет выполняться при импорте. Это позволяет использовать файл как самостоятельный скрипт и как модуль, который можно импортировать в другие программы.

	Повторное использование кода: Вынесение логики в функции и main() позволяет повторно использовать код и вызывать его в другом контексте, если потребуется. Например, если код организован в функции, их легче использовать в тестах или других скриптах, где вам может понадобиться вызвать их в другом порядке или с другими параметрами.

	Организованность и читаемость: main() действует как центральное место, которое объединяет все действия программы. Это делает код более читаемым и упрощает его понимание: другие программисты (или вы сами позже) смогут быстро увидеть общий порядок выполнения программы, глядя на структуру внутри main().

	Управление зависимостями и параметрами: Функция main() может принимать параметры, что упрощает обработку разных сценариев запуска программы. Это может быть полезно для тестирования, если в будущем вы захотите передавать параметры в main() для конфигурации запуска.

	Стандартный стиль: Использование конструкции if __name__ == "__main__": — общепринятая практика в Python, которая также может помочь избежать неожиданного запуска кода, если скрипт используется в другом проекте.

Таким образом, main() делает программу более универсальной, структурированной и удобной для будущих изменений.

===== Вопрос =====

а если я в файл ftp_upload.py положу несколько функций, их надо будет импортировать в головной файл по одной через from ftp_upload import upload_files, или можно сделать один раз import ftp_upload?
ChatGPT сказал:
ChatGPT

Можно сделать и так, и так, в зависимости от того, как вы хотите обращаться к функциям из файла ftp_upload.py в основном скрипте.

	Импорт всех функций через import ftp_upload
	Если вы импортируете файл целиком с import ftp_upload, то доступ к его функциям будет через префикс ftp_upload.. Например, если в ftp_upload.py есть функции upload_files и clear_remote_directory, вы можете вызывать их так:

'''
import ftp_upload

ftp_upload.upload_files(ftp, local_directory)
ftp_upload.clear_remote_directory(ftp)
'''

Это удобно, если функций много и вам нужно различать, из какого модуля они вызваны. Это также улучшает читаемость кода, особенно если в проекте используются несколько модулей.

Импорт конкретных функций через from ftp_upload import upload_files, clear_remote_directory
Вы можете импортировать только нужные функции, и тогда вызов функции не потребует префикса:

''from ftp_upload import upload_files, clear_remote_directory''

''upload_files(ftp, local_directory)''
''clear_remote_directory(ftp)''

Этот способ удобен, если у вас несколько ключевых функций, которые будут часто вызываться, и вы хотите сделать код более компактным.

Импорт всех функций с помощью from ftp_upload import *
Можно также использовать from ftp_upload import *, чтобы импортировать все функции из модуля в глобальное пространство имен:

	''from ftp_upload import *''

	''upload_files(ftp, local_directory)''
	''clear_remote_directory(ftp)''

Этот способ обычно не рекомендуется для больших проектов, так как может вызвать конфликты имен, если у вас есть функции с одинаковыми именами в разных модулях.

